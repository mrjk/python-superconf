{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Index","text":""},{"location":"#superconf","title":"SuperConf","text":"<p>This project is in Beta.</p> <p>A powerful and flexible configuration management library for Python. SuperConf provides a clean, type-safe, and intuitive way to handle configuration from multiple sources including environment variables, configuration files, and dictionaries.</p> <p>Inspired from Cafram, forked from ClassyConf.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>\ud83d\udd12 Type-safe configuration with built-in validation</li> <li>\ud83d\udd04 Multiple configuration sources (environment variables, files, dictionaries)</li> <li>\ud83d\udce6 Nested configuration support</li> <li>\ud83c\udfaf Default values and custom casting</li> <li>\ud83d\ude80 Easy to use and extend</li> <li>\ud83d\udd0d Strict type checking mode</li> <li>\ud83d\udcdd Comprehensive field types (Boolean, Integer, String, List, Dict, etc.)</li> <li>\ud83c\udfa8 Support for custom field types</li> </ul>"},{"location":"#quickstart","title":"Quickstart","text":""},{"location":"#installation","title":"Installation","text":"<p>Install using pip:</p> <pre><code>pip install superconf\n</code></pre> <p>Or install from source:</p> <pre><code>git clone https://github.com/mrjk/python-superconf.git\ncd python-superconf\npip install -e .\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example of how to use SuperConf:</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldBool, FieldList\n\nclass AppConfig(Configuration):\n\n    class Meta:\n        loaders = [Environment()]  # Load from environment variables\n\n    debug = FieldBool(default=False, help=\"Enable debug mode\")\n    port = FieldInt(default=8080, help=\"Server port\")\n    app_name = FieldString(default=\"myapp\", help=\"Application name\")\n    plugins = FieldList(default=[], help=\"Enabled plugins\")\n\n# Create and use the configuration\nconfig = AppConfig()\nprint(config.debug)  # False\nprint(config.port)   # 8080\n\n# Use environment variables to override defaults\n# export APP_PORT=9000\n# export APP_DEBUG=true\n</code></pre>"},{"location":"#overview","title":"Overview","text":""},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.9 or higher</li> <li>Dependencies:</li> <li>pyaml &gt;= 24.12.1</li> </ul>"},{"location":"#faq","title":"FAQ","text":"<p>Q: How is SuperConf different from other configuration libraries? A: SuperConf combines the best features of existing libraries with strong type safety, nested configurations, and a clean API.</p> <p>Q: Can I use multiple configuration sources? A: Yes, SuperConf supports multiple loaders that can be prioritized in order.</p> <p>Q: Is it possible to extend SuperConf with custom field types? A: Yes, you can create custom field types by extending the <code>Field</code> class.</p>"},{"location":"#known-issues","title":"Known Issues","text":"<ul> <li>String parsing for dictionary fields is not implemented yet</li> <li>Cache settings need refinement</li> <li>Some features are marked as WIP (Work in Progress)</li> </ul>"},{"location":"#development","title":"Development","text":""},{"location":"#setup-development-environment","title":"Setup Development Environment","text":"<ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/mrjk/python-superconf.git\ncd python-superconf\n</code></pre> <ol> <li>Install development dependencies:</li> </ol> <pre><code>poetry install\n</code></pre>"},{"location":"#development-commands","title":"Development Commands","text":"<p>SuperConf uses Taskfile for development tasks:</p> <ul> <li>Run tests: <code>task test</code></li> <li>Run linting: <code>task test_lint</code></li> <li>Fix linting issues: <code>task fix_lint</code></li> <li>Generate documentation: <code>task gen_doc_class_graph</code></li> </ul>"},{"location":"#running-tests","title":"Running Tests","text":"<pre><code>task test        # Run all tests\ntask test_pytest # Run pytest suite\ntask test_recap  # View test coverage report\n</code></pre>"},{"location":"#project-information","title":"Project Information","text":""},{"location":"#license","title":"License","text":"<p>This project is licensed under the GPLv3 License.</p>"},{"location":"#author","title":"Author","text":"<ul> <li>mrjk mrjk.78@gmail.com</li> </ul>"},{"location":"#support","title":"Support","text":"<p>For support, please: 1. Check the documentation 2. Open an issue on GitHub</p>"},{"location":"#related-projects","title":"Related Projects","text":"<ul> <li>ClassyConf</li> <li>python-decouple</li> <li>dynaconf</li> </ul>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>[ ] Implement string parsing for dictionary fields</li> <li>[ ] Improve caching mechanism</li> <li>[ ] Add more configuration sources</li> <li>[ ] Create comprehensive documentation site</li> <li>[ ] Add more examples and use cases</li> <li>[ ] Implement configuration validation hooks</li> </ul>"},{"location":"install/","title":"Installation","text":"<p>Install SuperConf using pip:</p> <pre><code>pip install superconf\n</code></pre> <p>For basic usage and features, check out the quickstart documentation.</p>"},{"location":"quickstart/","title":"Quickstart","text":""},{"location":"quickstart/#1-import-required-modules","title":"1. Import Required Modules","text":"<pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldConf\n</code></pre>"},{"location":"quickstart/#2-define-your-configuration","title":"2. Define Your Configuration","text":"<p>Here's a basic example of defining a configuration class:</p> <pre><code>class AppConfig(Configuration):\n    \"\"\"Application configuration\"\"\"\n\n    class Meta:\n        cache = True\n        app_name = \"my-app\"\n        env_prefix = \"MYAPP\"\n\n    # Define configuration fields\n    root_dir = FieldConf(help_text=\"Root directory for the application\")\n    module_dir = FieldConf(help_text=\"Directory for modules\")\n    data_dir = FieldConf(help_text=\"Directory for data storage\")\n\nclass App(Configuration):\n    \"\"\"Main Application example\"\"\"\n\n    class Meta:\n        cache = True\n        app_name = \"my-app\"\n        env_prefix = \"MYAPP\"\n\n    # Application configuration\n    config = FieldConf(children_class=AppConfig)\n\n    @property\n    def root_dir(self):\n        \"\"\"Return root dir\"\"\"\n        return self.config.root_dir\n\n    @property\n    def module_dir(self):\n        \"\"\"Return module dir\"\"\"\n        return self.config.module_dir\n\n    @property\n    def data_dir(self):\n        \"\"\"Return data dir\"\"\"\n        return self.config.data_dir\n</code></pre>"},{"location":"quickstart/#3-use-the-configuration","title":"3. Use the Configuration","text":"<pre><code># Initialize with default values\napp = App()\n\n# Initialize with custom configuration\ncustom_conf = {\n    \"config\": {\n        \"root_dir\": \"/path/to/root\",\n        \"module_dir\": \"/path/to/modules\",\n        \"data_dir\": \"/path/to/data\"\n    }\n}\napp = App(value=custom_conf)\n\n# Access configuration values\nprint(f\"Root directory: {app.root_dir}\")\nprint(f\"Module directory: {app.module_dir}\")\nprint(f\"Data directory: {app.data_dir}\")\n\n# Get all configuration values\nprint(app.get_values())\n</code></pre>"},{"location":"quickstart/#key-features","title":"Key Features","text":"<ul> <li>Declarative configuration definition</li> <li>Type checking and validation</li> <li>Environment variable support</li> <li>Nested configuration support</li> <li>Default values and help text</li> <li>Configuration inheritance</li> <li>Automatic CLI argument parsing</li> </ul> <p>For more advanced usage and features, check out the full documentation.</p>"},{"location":"architecture/0001-record-architecture-decisions/","title":"1. Record architecture decisions","text":"<p>Date: 2025-01-23</p>"},{"location":"architecture/0001-record-architecture-decisions/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0001-record-architecture-decisions/#context","title":"Context","text":"<p>Implementation of a systematic approach for documenting architectural decisions is required for maintaining technical documentation and design rationale throughout the project lifecycle.</p>"},{"location":"architecture/0001-record-architecture-decisions/#decision","title":"Decision","text":"<p>Implementation of Architecture Decision Records (ADRs) following the Nygard specification (reference implementation) will be utilized as the standard documentation format.</p>"},{"location":"architecture/0001-record-architecture-decisions/#consequences","title":"Consequences","text":"<p>The implementation follows the specifications outlined in Nygard's documentation. For automated ADR management, the project can integrate with Nat Pryce's adr-tools for version control and standardization of ADR workflows.</p>"},{"location":"architecture/0002-project-motivation/","title":"2. Project motivation","text":"<p>Date: 2025-01-23</p>"},{"location":"architecture/0002-project-motivation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0002-project-motivation/#context","title":"Context","text":"<p>Python applications often require handling configuration from multiple sources, with proper type validation and flexibility. Existing solutions have limitations:</p> <ul> <li>Lack of strong type safety</li> <li>Limited support for nested configurations</li> <li>Complex APIs</li> <li>Insufficient validation mechanisms</li> <li>Limited flexibility in configuration sources</li> </ul> <p>The project aims to address these limitations while building upon proven concepts from projects like Cafram and ClassyConf.</p>"},{"location":"architecture/0002-project-motivation/#decision","title":"Decision","text":"<p>We decided to create SuperConf as a new configuration management library with the following key principles:</p> <ol> <li>Strong type safety and validation at the core</li> <li>Support for multiple configuration sources (environment variables, files, dictionaries)</li> <li>Clean and intuitive API inspired by successful patterns</li> <li>Comprehensive field types with extensibility</li> <li>First-class support for nested configurations</li> <li>Modern Python features (3.9+) for better developer experience</li> </ol>"},{"location":"architecture/0002-project-motivation/#consequences","title":"Consequences","text":""},{"location":"architecture/0002-project-motivation/#benefits","title":"Benefits","text":"<ul> <li>Improved reliability through type-safe configuration</li> <li>Reduced configuration-related bugs through validation</li> <li>Better developer experience with clear, intuitive API</li> <li>Flexibility in configuration sources and formats</li> <li>Easy extension through custom field types</li> <li>Strong foundation for complex configuration needs</li> </ul>"},{"location":"architecture/0002-project-motivation/#challenges","title":"Challenges","text":"<ul> <li>Maintaining backward compatibility with Python 3.9+</li> <li>Need for comprehensive documentation</li> <li>Ongoing maintenance of multiple configuration sources</li> <li>Potential performance considerations with validation</li> <li>Need to balance flexibility with simplicity</li> </ul>"},{"location":"architecture/0003-project-alternatives/","title":"3. Project alternatives","text":"<p>Date: 2025-01-23</p>"},{"location":"architecture/0003-project-alternatives/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0003-project-alternatives/#context","title":"Context","text":"<p>Technical evaluation of Python configuration management solutions across different categories:</p>"},{"location":"architecture/0003-project-alternatives/#configuration-frameworks","title":"Configuration Frameworks","text":"<ul> <li>Hydra: Advanced hierarchical configuration with composition capabilities</li> <li>OmegaConf: YAML-based hierarchical configuration system</li> <li>Dynaconf: Multi-format configuration with layered environments</li> <li>ConfigObj: Config file reading, writing and validation</li> <li>Spock: Configuration management system</li> <li>Classy Conf: Configuration management solution</li> </ul>"},{"location":"architecture/0003-project-alternatives/#minimal-solutions","title":"Minimal Solutions","text":"<ul> <li>Hydralette: Lightweight Hydra alternative</li> <li>ConfZ: Simple YAML configuration</li> <li>YACS: Yet Another Configuration System</li> <li>XPFlow: Experiment flow management</li> </ul>"},{"location":"architecture/0003-project-alternatives/#environment-management","title":"Environment Management","text":"<ul> <li>python-dotenv: .env file loader</li> <li>environs: Environment variable management</li> <li>parse_it: Multi-source configuration parser</li> <li>python-anyconfig: Configuration file loader</li> <li>python-decouple: Settings management with strict separation</li> <li>betterconf: Type-safe environment configuration</li> </ul>"},{"location":"architecture/0003-project-alternatives/#specialized-configuration-tools","title":"Specialized Configuration Tools","text":"<ul> <li>coqpit: Configuration management tool</li> <li>omni-fig: Configuration framework</li> <li>profig: Configuration utility</li> <li>ConfigObj: Config file parser</li> </ul>"},{"location":"architecture/0003-project-alternatives/#validation-libraries","title":"Validation Libraries","text":"<ul> <li>pydantic: Data validation using Python type annotations</li> <li>schema: Schema validation library</li> <li>cerberus: Lightweight validation framework</li> <li>jsonschema: JSON Schema validator</li> <li>xdata: Data validation tool</li> <li>validr: Fast validation library</li> <li>schematics: Domain model system</li> <li>Voluptuous: Data validation library</li> <li>valideer: Lightweight validation library</li> <li>colander: Form validation library</li> </ul>"},{"location":"architecture/0003-project-alternatives/#cli-integration","title":"CLI Integration","text":"<ul> <li>argparse: Standard library argument parser</li> <li>ConfigArgParse: argparse extension with config file support</li> <li>click/Typer: Command line interface creation toolkit</li> <li>cliff: Command line framework</li> </ul>"},{"location":"architecture/0003-project-alternatives/#additional-tools","title":"Additional Tools","text":"<ul> <li>box: Python dictionaries with advanced dot notation access</li> <li>attrs: Python classes without boilerplate</li> <li>dacite: Data class type validation</li> </ul>"},{"location":"architecture/0003-project-alternatives/#decision","title":"Decision","text":"<p>Based on the evaluation of existing solutions, we will implement our own configuration management system that addresses the limitations identified in ADR 002, while incorporating proven concepts from existing tools.</p>"},{"location":"architecture/0003-project-alternatives/#consequences","title":"Consequences","text":"<p>Following ADR 002's documentation standards, this decision enables systematic tracking of architectural choices. The implementation will focus on addressing key limitations in existing solutions while maintaining compatibility with standard Python practices. Integration with adr-tools will ensure proper version control of architectural decisions.</p>"},{"location":"architecture/0004-class-instanciation-policy/","title":"4. Class Instantiation Policy","text":"<p>Date: 2025-01-23</p>"},{"location":"architecture/0004-class-instanciation-policy/#status","title":"Status","text":"<p>Draft</p>"},{"location":"architecture/0004-class-instanciation-policy/#context","title":"Context","text":"<p>Optimization of object lifecycle management requires strict instantiation policies to minimize memory overhead and maintain predictable object creation patterns.</p>"},{"location":"architecture/0004-class-instanciation-policy/#decision","title":"Decision","text":""},{"location":"architecture/0004-class-instanciation-policy/#class-instantiation-specifications","title":"Class Instantiation Specifications","text":"<ol> <li> <p><code>Configuration</code> Class:    * Primary instantiation scope: Application level    * Lifecycle: Usually single instance per configuration context    * Responsibility: Configuration state management</p> </li> <li> <p><code>Field</code> Class:    * Instantiation constraints:</p> <ul> <li>Class definition context only (user)</li> <li>Child object declarations (internal only)</li> <li>Lifecycle: Bound to parent Configuration instance</li> <li>Responsibility: Field configuration</li> </ul> </li> <li> <p><code>Loader</code> Class:    * Primary instantiation context: Class definitions    * Supported patterns:</p> <ul> <li>Static class-defined loaders</li> <li>Instance loaders for edge case handling</li> <li>Lifecycle: Determined by usage context</li> <li>Responsibility: Data loaders</li> </ul> </li> <li> <p><code>Cast</code> Class:    * Primary instantiation scope: Application level    * Purpose: Edge case type conversion handling    * Lifecycle: On-demand instantiation    * Responsibility: Type casting</p> </li> </ol>"},{"location":"architecture/0004-class-instanciation-policy/#consequences","title":"Consequences","text":"<ul> <li>Reduced memory footprint through controlled instantiation</li> <li>Clear object ownership hierarchies</li> <li>Predictable object lifecycle management</li> <li>Flexibility for edge case handling while maintaining core patterns</li> </ul> <p>Note: This specification requires further refinement for complete implementation guidelines.</p>"},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/","title":"5. Value Resolution and Type Casting Implementation","text":"<p>Date: 2025-01-23</p>"},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/#context","title":"Context","text":"<p>Implementation of value resolution, default handling, and type casting requires precise specification to ensure consistent behavior across the configuration system.</p>"},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/#decision","title":"Decision","text":""},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/#component-specifications","title":"Component Specifications","text":"<ol> <li> <p>Default Value Resolution (<code>default</code>):    - Initial state: <code>NOT_SET</code>    - Resolution hierarchy:</p> <ul> <li>Return provided value if not <code>NOT_SET</code></li> <li>Return <code>NOT_SET</code> if no value provided</li> <li>Guarantees value presence when specified</li> <li>Ensures type correctness when <code>cast</code> is enabled</li> </ul> </li> <li> <p>Type Casting Implementation (<code>cast</code>):    - Requires callable object or cast is skipped    - Execution conditions:</p> <ul> <li>Processes non-<code>NOT_SET</code> values</li> <li>If value is <code>NOT_SET</code>, then it uses <code>default</code> value</li> <li>Throws TypeError on failed casting operations</li> </ul> </li> <li> <p>Value Injection (<code>value</code>):    - Direct configuration injection mechanism    - Resolution logic:</p> <ul> <li>If <code>NOT_SET</code>: utilize <code>default</code> value chain</li> <li>If <code>default</code> is <code>NOT_SET</code>: uses <code>NOT_SET</code></li> <li>Cast implementation:</li> <li>Skip if value is <code>NOT_SET</code></li> <li>Execute cast operation if cast is enabled</li> </ul> </li> </ol>"},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/#resolution-algorithm","title":"Resolution Algorithm","text":"<ol> <li>Parameter initialization:    - Load value, cast, and default parameters</li> <li>Value resolution:</li> </ol> <pre><code>if value != NOT_SET:\n    result = value\nelif default != NOT_SET:\n    result = default\nelse:\n    result = NOT_SET\n</code></pre> <ol> <li>Cast execution:    - Skip if result is <code>NOT_SET</code>    - Execute cast operation if enabled</li> </ol>"},{"location":"architecture/0005-value-resolution-and-type-casting-implementation/#consequences","title":"Consequences","text":"<p>The implementation provides granular control over value resolution and type casting while maintaining predictable behavior patterns. The complexity is justified by the flexibility requirements of the configuration system.</p>"},{"location":"architecture/0006-exclusive-argparse-implementation/","title":"6. Exclusive argparse Implementation","text":"<p>Date: 2025-01-23</p>"},{"location":"architecture/0006-exclusive-argparse-implementation/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"architecture/0006-exclusive-argparse-implementation/#context","title":"Context","text":"<p>Integration of multiple argument parsing libraries (e.g., Click, Typer, Cliff) would significantly increase implementation complexity and maintenance overhead. Each parser implementation requires specific adaptation layers and ongoing compatibility maintenance.</p>"},{"location":"architecture/0006-exclusive-argparse-implementation/#decision","title":"Decision","text":"<p>Implementation scope is restricted to Python's native <code>argparse</code> module exclusively. The API architecture will be designed with clear abstraction boundaries to facilitate third-party parser implementations through extension points.</p>"},{"location":"architecture/0006-exclusive-argparse-implementation/#consequences","title":"Consequences","text":"<ul> <li>Third-party parser implementations must be maintained externally</li> <li>API design requires well-defined interfaces for parser integration</li> <li>Reduced core codebase complexity and maintenance burden</li> <li>Clear separation of concerns between core functionality and parser implementations</li> </ul>"},{"location":"architecture/list/","title":"Architecture Decision Records","text":"<ul> <li>1. Record architecture decisions</li> <li>2. Project motivation</li> <li>3. Project alternatives</li> <li>4. Class Instantiation Policy</li> <li>5. Value Resolution and Type Casting Implementation</li> <li>6. Exclusive argparse Implementation</li> </ul>"},{"location":"docs/cast/","title":"Casts","text":"<p>SuperConf provides several built-in cast types to convert configuration values into appropriate Python types. These casts ensure that your configuration values are properly typed and validated.</p>"},{"location":"docs/cast/#available-casts","title":"Available Casts","text":""},{"location":"docs/cast/#asboolean-fieldbool","title":"AsBoolean (FieldBool)","text":"<p>Converts values to boolean type. Recognizes various string representations of true/false values.</p> <p>True values:</p> <ul> <li>\"1\"</li> <li>\"true\", \"True\"</li> <li>\"yes\", \"y\"</li> <li>\"on\"</li> <li>\"t\"</li> </ul> <p>False values:</p> <ul> <li>\"0\"</li> <li>\"false\", \"False\"</li> <li>\"no\", \"n\"</li> <li>\"off\"</li> <li>\"f\"</li> </ul> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldBool\n\nclass AppConfig(Configuration):\n    debug = FieldBool(default=False)\n    is_enabled = FieldBool(default=\"yes\")\n</code></pre>"},{"location":"docs/cast/#asint-fieldint","title":"AsInt (FieldInt)","text":"<p>Converts values to integer type. Raises <code>InvalidCastConfiguration</code> if the value cannot be converted to an integer.</p> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldInt\n\nclass AppConfig(Configuration):\n    port = FieldInt(default=8080)\n    max_connections = FieldInt(default=\"100\")  # Will be converted to int\n</code></pre>"},{"location":"docs/cast/#aslist-fieldlist","title":"AsList (FieldList)","text":"<p>Converts values to Python lists. Can handle: - Empty values (returns empty list) - String input (splits by delimiter, default is comma) - Existing sequences (lists, tuples) - Quoted strings with delimiters</p> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldList\n\nclass AppConfig(Configuration):\n    plugins = FieldList(default=[])\n    hosts = FieldList(default=\"localhost,127.0.0.1\")  # Will become [\"localhost\", \"127.0.0.1\"]\n    items = FieldList(default='\"item,with,comma\",simple')  # Will handle quoted items with commas\n</code></pre>"},{"location":"docs/cast/#astuple-fieldtuple","title":"AsTuple (FieldTuple)","text":"<p>Similar to AsList but converts values to Python tuples. Has the same parsing capabilities as AsList.</p> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldTuple\n\nclass AppConfig(Configuration):\n    allowed_hosts = FieldTuple(default=(\"localhost\",))\n    ports = FieldTuple(default=\"8080,8081,8082\")  # Will become (\"8080\", \"8081\", \"8082\")\n</code></pre>"},{"location":"docs/cast/#asdict-fielddict","title":"AsDict (FieldDict)","text":"<p>Converts values to Python dictionaries. Currently supports:</p> <ul> <li>Empty values (returns empty dict)</li> <li>Existing dictionary objects</li> <li>Note: String parsing is not implemented yet</li> </ul> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldDict\n\nclass AppConfig(Configuration):\n    settings = FieldDict(default={})\n    database = FieldDict(default={\"host\": \"localhost\", \"port\": 5432})\n</code></pre>"},{"location":"docs/cast/#asoption-fieldoption","title":"AsOption (FieldOption)","text":"<p>Provides a way to map input values to predefined options. Useful for configuration values that should be one of a set of allowed values.</p> <p>Features:</p> <ul> <li>Mapping of input values to predefined options</li> <li>Optional default option when invalid value is provided</li> <li>Raises <code>InvalidCastConfiguration</code> if no default and value is invalid</li> </ul> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldOption\n\noptions = {\n    \"_default_\": \"development\",\n    \"dev\": \"development\",\n    \"prod\": \"production\",\n    \"test\": \"testing\"\n}\n\nclass AppConfig(Configuration):\n    environment = FieldOption(options, default=\"dev\")\n    mode = FieldOption(options, default_option=\"_default_\")  # Falls back to default option\n</code></pre>"},{"location":"docs/cast/#asidentity-no-field-type","title":"AsIdentity (No Field Type)","text":"<p>This is a no-op cast that returns the value as-is. Used internally when no specific casting is needed.</p>"},{"location":"docs/cast/#string-field-fieldstring","title":"String Field (FieldString)","text":"<p>While not a cast in the traditional sense, the FieldString ensures values are converted to strings.</p> <p>Example:</p> <pre><code>from superconf import Configuration\nfrom superconf.fields import FieldString\n\nclass AppConfig(Configuration):\n    name = FieldString(default=\"app\")\n    version = FieldString(default=1.0)  # Will be converted to \"1.0\"\n</code></pre>"},{"location":"docs/cast/#error-handling","title":"Error Handling","text":"<p>All casts can raise <code>InvalidCastConfiguration</code> when they fail to cast a value. When using fields with <code>strict_cast=True</code> in the configuration Meta class, failed casts will raise <code>CastValueFailure</code>.</p> <p>Example:</p> <pre><code>class AppConfig(Configuration):\n    class Meta:\n        strict_cast = True  # Will raise errors on cast failures\n\n    port = FieldInt(default=\"invalid\")  # Will raise CastValueFailure\n</code></pre>"},{"location":"docs/configurations/","title":"Configuration Classes","text":"<p>SuperConf provides three main configuration classes that serve different purposes in managing configuration data:</p>"},{"location":"docs/configurations/#configuration","title":"Configuration","text":"<p>The base <code>Configuration</code> class is the primary class for defining structured configuration objects. It inherits from <code>ConfigurationDict</code> and uses the <code>DeclarativeValuesMetaclass</code> for handling field declarations.</p> <p>Key features:</p> <ul> <li>Declarative style configuration definition</li> <li>Field-based configuration with type checking</li> <li>Environment variable support through built-in loaders</li> <li>Nested configuration support</li> <li>Default values and help text support</li> </ul> <p>Example:</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldBool\n\nclass DatabaseConfig(Configuration):\n    host = FieldString(default=\"localhost\", help=\"Database host\")\n    port = FieldInt(default=5432, help=\"Database port\")\n    username = FieldString(help=\"Database username\")\n    password = FieldString(help=\"Database password\")\n\n# Usage\ndb_config = DatabaseConfig()\nprint(db_config.host)  # \"localhost\"\nprint(db_config.port)  # 5432\n</code></pre>"},{"location":"docs/configurations/#configurationdict","title":"ConfigurationDict","text":"<p><code>ConfigurationDict</code> is a dictionary-like configuration container that allows dynamic key-value pairs. It's useful when you need to store configurations with arbitrary keys.</p> <p>Key features:</p> <ul> <li>Dictionary-like interface</li> <li>Dynamic field creation</li> <li>Support for nested configurations</li> <li>Caching of values</li> <li>Environment variable loading</li> <li>Extra fields support (enabled by default)</li> </ul> <p>Example:</p> <pre><code>from superconf.configuration import ConfigurationDict\nfrom superconf.fields import FieldString, FieldInt\n\nclass ServiceConfig(ConfigurationDict):\n    url = FieldString()\n    timeout = FieldInt(default=30)\n\nclass AppConfig(ConfigurationDict):\n    services = FieldDict(children_class=ServiceConfig)\n\n# Usage\nconfig = AppConfig(values={\n    'services': {\n        'auth': {'url': 'https://auth.example.com', 'timeout': 60},\n        'api': {'url': 'https://api.example.com'},\n    }\n})\n\nprint(config.services['auth'].timeout)  # 60\nprint(config.services['api'].timeout)   # 30 (default)\n</code></pre>"},{"location":"docs/configurations/#configurationlist","title":"ConfigurationList","text":"<p><code>ConfigurationList</code> is a list-like configuration container for managing ordered sequences of configuration items.</p> <p>Key features:</p> <ul> <li>List-like interface</li> <li>Integer-indexed access</li> <li>Support for homogeneous configuration items</li> <li>Dynamic field creation for list items</li> <li>Environment variable loading</li> <li>Extra fields support (enabled by default)</li> </ul> <p>Example:</p> <pre><code>from superconf.configuration import ConfigurationList\nfrom superconf.fields import FieldString, FieldInt, FieldList\n\nclass ServiceConfig(Configuration):\n    url = FieldString()\n    timeout = FieldInt(default=30)\n\nclass AppConfig(Configuration):\n    services = FieldList(children_class=ServiceConfig)\n\n# Usage\nconfig = AppConfig(values={\n    'services': [\n        {'url': 'https://auth.example.com', 'timeout': 60},\n        {'url': 'https://api.example.com'},\n    ]\n})\n\nprint(config.services[0].timeout)  # 60\nprint(config.services[1].timeout)  # 30 (default)\n</code></pre>"},{"location":"docs/configurations/#common-features","title":"Common Features","text":"<p>All configuration classes share these common features:</p> <ol> <li> <p>Value Loading:    - Support for multiple value loaders (Environment variables, dictionaries, etc.)    - Caching of loaded values    - Value type casting</p> </li> <li> <p>Field Management:    - Declared fields tracking    - Dynamic field creation    - Field value validation</p> </li> <li> <p>Inheritance Support:    - Configuration class inheritance    - Field inheritance from parent classes    - Override capability through Meta class</p> </li> <li> <p>Value Access:    - Dictionary-style access (<code>config['key']</code>)    - Attribute-style access (<code>config.key</code>)    - Nested value access (<code>config.service.url</code>)</p> </li> </ol>"},{"location":"docs/fields/","title":"Configuration Fields","text":"<p>SuperConf provides several built-in field types to handle different types of configuration values. Each field type is designed to handle specific data types and provides validation, type casting, and default value handling.</p>"},{"location":"docs/fields/#available-field-types","title":"Available Field Types","text":""},{"location":"docs/fields/#fieldstring","title":"FieldString","text":"<ul> <li>Purpose: Handles text and string values</li> <li>Default: Empty string (<code>\"\"</code>) if not specified</li> <li>Validation: Ensures the value is or can be converted to a string</li> <li>Common uses: Names, paths, URLs, text configurations</li> </ul>"},{"location":"docs/fields/#fieldint","title":"FieldInt","text":"<ul> <li>Purpose: Handles integer numeric values</li> <li>Default: <code>0</code> if not specified</li> <li>Validation: Ensures the value is or can be converted to an integer</li> <li>Common uses: Ports, counts, numeric IDs, timeouts</li> </ul>"},{"location":"docs/fields/#fieldbool","title":"FieldBool","text":"<ul> <li>Purpose: Handles boolean (True/False) values</li> <li>Default: <code>False</code> if not specified</li> <li>Validation: Accepts boolean values, strings like \"true\"/\"false\", 0/1</li> <li>Common uses: Feature flags, toggles, enable/disable settings</li> </ul>"},{"location":"docs/fields/#fieldlist","title":"FieldList","text":"<ul> <li>Purpose: Handles lists or arrays of values</li> <li>Default: Empty list (<code>[]</code>) if not specified</li> <li>Validation: Ensures the value is a sequence type</li> <li>Common uses: Multiple values, arrays of settings, feature lists</li> </ul>"},{"location":"docs/fields/#fielddict","title":"FieldDict","text":"<ul> <li>Purpose: Handles nested dictionary/object configurations</li> <li>Default: Empty dict (<code>{}</code>) if not specified</li> <li>Validation: Ensures the value is a mapping type</li> <li>Common uses: Nested configurations, complex settings groups</li> </ul>"},{"location":"docs/fields/#fieldfloat","title":"FieldFloat","text":"<ul> <li>Purpose: Handles floating-point decimal numbers</li> <li>Default: <code>0.0</code> if not specified</li> <li>Validation: Ensures the value is or can be converted to a float</li> <li>Common uses: Scientific calculations, percentages, rates</li> </ul>"},{"location":"docs/fields/#field-properties","title":"Field Properties","text":"<p>Each field can have the following properties:</p>"},{"location":"docs/fields/#default-value","title":"Default Value","text":"<ul> <li>Set using the <code>default</code> parameter</li> <li>Provides a fallback value if none is specified</li> <li>Must match the field type</li> </ul>"},{"location":"docs/fields/#help-text","title":"Help Text","text":"<ul> <li>Set using the <code>help</code> parameter</li> <li>Provides documentation for the configuration option</li> <li>Used in generating documentation and error messages</li> </ul>"},{"location":"docs/fields/#validation","title":"Validation","text":"<ul> <li>Set using the <code>validators</code> parameter</li> <li>List of functions that validate the input</li> <li>Each validator should return True or raise ValidationError</li> <li>Custom validators can implement complex business rules</li> </ul>"},{"location":"docs/fields/#type-casting","title":"Type Casting","text":"<ul> <li>Automatic conversion of input values to the correct type</li> <li>Handles string inputs from config files</li> <li>Raises TypeError if conversion fails</li> </ul>"},{"location":"docs/fields/#example-usage","title":"Example Usage","text":"<pre><code>from superconf.fields import FieldString, FieldInt, FieldBool, FieldList, FieldDict\n\nclass Config(Configuration):\n    # String field with default and help\n    name = FieldString(default=\"app\", help=\"Application name\")\n\n    # Integer with validation\n    port = FieldInt(\n        default=8080,\n        help=\"Server port\",\n        validators=[lambda x: 1024 &lt;= x &lt;= 65535]\n    )\n\n    # Boolean field\n    debug = FieldBool(default=False, help=\"Enable debug mode\")\n\n    # List field with default values\n    features = FieldList(default=[\"basic\"], help=\"Enabled features\")\n\n    # Dictionary field with nested configuration\n    database = FieldDict(default={\n        \"host\": \"localhost\",\n        \"port\": 5432\n    }, help=\"Database configuration\")\n</code></pre>"},{"location":"docs/fields/#best-practices","title":"Best Practices","text":"<ol> <li>Always provide help text for better documentation</li> <li>Use appropriate validators to ensure data integrity</li> <li>Set sensible default values when possible</li> <li>Use type-specific fields instead of generic ones</li> <li>Structure nested configurations using FieldDict</li> </ol>"},{"location":"docs/loaders/","title":"Configuration Loaders","text":"<p>SuperConf provides several loader classes that allow you to load configuration values from different sources. Each loader implements a consistent interface for retrieving configuration values.</p>"},{"location":"docs/loaders/#available-loaders","title":"Available Loaders","text":""},{"location":"docs/loaders/#1-environment-loader","title":"1. Environment Loader","text":"<p>The <code>Environment</code> loader retrieves configuration values from environment variables. It supports optional prefixing of environment variable names.</p> <pre><code>from superconf.loaders import Environment, EnvPrefix\n\n# Without prefix\nconfig = Configuration(loaders=[Environment()])\n\n# With prefix\nconfig = Configuration(loaders=[Environment(keyfmt=EnvPrefix(\"MYAPP_\"))])\n</code></pre> <p>Environment variables will be automatically converted to uppercase. With a prefix:</p> <ul> <li>Configuration key: <code>database_url</code></li> <li>Environment variable: <code>MYAPP_DATABASE_URL</code></li> </ul>"},{"location":"docs/loaders/#2-envfile-loader","title":"2. EnvFile Loader","text":"<p>The <code>EnvFile</code> loader reads configuration from a <code>.env</code> file. It supports the standard environment file format.</p> <pre><code>from superconf.loaders import EnvFile\n\nconfig = Configuration(loaders=[EnvFile(filename=\".env\")])\n</code></pre> <p>Example <code>.env</code> file:</p> <pre><code>DATABASE_URL=postgresql://localhost:5432/mydb\nAPI_KEY=secret123\nDEBUG=true\n</code></pre>"},{"location":"docs/loaders/#3-commandline-loader","title":"3. CommandLine Loader","text":"<p>The <code>CommandLine</code> loader extracts configuration from command-line arguments using Python's <code>argparse</code>.</p> <pre><code>from superconf.loaders import CommandLine\nimport argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument('--host', default='localhost')\nparser.add_argument('--port', type=int, default=8000)\n\nconfig = Configuration(loaders=[CommandLine(parser)])\n</code></pre>"},{"location":"docs/loaders/#4-dict-loader","title":"4. Dict Loader","text":"<p>The <code>Dict</code> loader allows you to provide configuration values directly through a Python dictionary.</p> <pre><code>from superconf.loaders import Dict\n\nconfig_dict = {\n    'database': {\n        'host': 'localhost',\n        'port': 5432\n    },\n    'debug': True\n}\n\nconfig = Configuration(loaders=[Dict(config_dict)])\n</code></pre>"},{"location":"docs/loaders/#5-recursivesearch-loader","title":"5. RecursiveSearch Loader","text":"<p>The <code>RecursiveSearch</code> loader searches for configuration files in the current directory and parent directories until it reaches a specified root path.</p> <pre><code>from superconf.loaders import RecursiveSearch\n\nconfig = Configuration(loaders=[\n    RecursiveSearch(\n        starting_path=\"./myapp\",\n        root_path=\"/\",\n        filetypes=[\n            (\"*.ini\", IniFileLoader),\n            (\"*.yaml\", YamlFileLoader)\n        ]\n    )\n])\n</code></pre>"},{"location":"docs/loaders/#loader-priority","title":"Loader Priority","text":"<p>When multiple loaders are specified, they are checked in order. The first loader that provides a value for a configuration key will be used. This allows for a flexible override system:</p> <pre><code>config = Configuration(loaders=[\n    Environment(),           # Highest priority: environment variables\n    EnvFile(\".env\"),        # Then .env file\n    Dict(default_config)    # Lowest priority: default values\n])\n</code></pre>"},{"location":"docs/loaders/#common-loader-features","title":"Common Loader Features","text":"<p>All loaders in SuperConf share these common characteristics:</p> <ol> <li> <p>Consistent Interface:    - <code>__contains__(item)</code>: Check if a configuration key exists    - <code>__getitem__(item)</code>: Retrieve a configuration value    - <code>check()</code>: Verify if the loader is usable    - <code>reset()</code>: Clear any cached values</p> </li> <li> <p>Error Handling:    - Raises <code>KeyError</code> when a configuration key is not found    - Raises <code>InvalidConfigurationFile</code> for file-based loaders when the file is invalid    - Raises <code>InvalidPath</code> when file paths are incorrect</p> </li> <li> <p>Type Casting:    - Raw values are returned as strings    - Type casting is handled at the configuration field level    - Boolean values are automatically detected and converted</p> </li> </ol>"},{"location":"docs/loaders/#creating-custom-loaders","title":"Creating Custom Loaders","text":"<p>You can create custom loaders by inheriting from <code>AbstractConfigurationLoader</code>:</p> <pre><code>from superconf.loaders import AbstractConfigurationLoader\n\nclass MyCustomLoader(AbstractConfigurationLoader):\n    def __init__(self, source):\n        self.source = source\n\n    def __contains__(self, item):\n        return item in self.source\n\n    def __getitem__(self, item):\n        return self.source[item]\n\n    def check(self):\n        return True  # Implement your validation logic\n\n    def reset(self):\n        # Implement if you need to clear cached data\n        pass\n</code></pre>"},{"location":"guides/best_practices/","title":"Best practices","text":""},{"location":"guides/best_practices/#best-practices_1","title":"Best Practices","text":"<ol> <li>Logical Grouping: Group related configuration settings into their own configuration classes</li> <li>Depth Control: While you can nest configurations deeply, try to keep the structure as flat as possible for maintainability</li> <li>Documentation: Use help text to document the purpose of each configuration field</li> <li>Defaults: Provide sensible defaults where possible, especially for nested configurations</li> <li>Validation: Use required=True for mandatory fields in nested configurations</li> </ol>"},{"location":"guides/best_practices/#feature-flags","title":"Feature Flags","text":"<pre><code>class FeatureFlags(Configuration):\n    beta_features = FieldBool(default=False)\n    experimental = FieldBool(default=False)\n    maintenance_mode = FieldBool(default=False)\n\nclass AppConfig(Configuration):\n    features = FeatureFlags\n</code></pre>"},{"location":"guides/best_practices/#6-error-handling","title":"6. Error Handling","text":"<p>When working with nested configurations, be aware of these common issues:</p> <ol> <li>Missing Values: Some fields might be unset if no default value is provided</li> <li>Type Mismatches: Ensure provided values match the expected types in nested structures</li> <li>Invalid Paths: When accessing nested values, verify the path exists to avoid errors</li> </ol> <pre><code>try:\n    config = AppConfig(values={'invalid_nested_path': {'key': 'value'}})\nexcept Exception as e:\n    print(f\"Configuration error: {e}\")\n</code></pre>"},{"location":"guides/guide_101/","title":"SuperConf User Guide","text":"<p>This guide will walk you through the basic usage of SuperConf, a powerful configuration management library for Python.</p>"},{"location":"guides/guide_101/#basic-usage","title":"Basic Usage","text":""},{"location":"guides/guide_101/#1-creating-a-configuration-class","title":"1. Creating a Configuration Class","text":"<p>The most basic way to use SuperConf is to create a configuration class that inherits from <code>Configuration</code>:</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldBool\n\nclass AppConfig(Configuration):\n    # Define your configuration fields\n    debug = FieldBool(default=False, help=\"Enable debug mode\")\n    port = FieldInt(default=8080, help=\"Server port\")\n    app_name = FieldString(default=\"myapp\", help=\"Application name\")\n    api_key = FieldString(help=\"API key for external service\")  # No default value\n\n# Create an instance\nconfig = AppConfig()\n\n# Access configuration values\nprint(config.debug)    # False (default value)\nprint(config.port)     # 8080 (default value)\nprint(config.api_key)  # None (no default value was set)\n\n# Check if a field has a value set\nprint(config.is_set('debug'))     # True (has default value)\nprint(config.is_set('api_key'))   # False (no value set)\n</code></pre>"},{"location":"guides/guide_101/#2-loading-configuration-values","title":"2. Loading Configuration Values","text":"<p>You can provide values when creating a configuration instance:</p> <pre><code>config = AppConfig(values={\n    'debug': True,\n    'port': 9000,\n    'app_name': 'production-app',\n    'api_key': 'secret-key'\n})\n\nprint(config.debug)     # True\nprint(config.port)      # 9000\nprint(config.app_name)  # \"production-app\"\nprint(config.api_key)   # \"secret-key\"\n</code></pre>"},{"location":"guides/guide_101/#3-environment-variables","title":"3. Environment Variables","text":"<p>SuperConf follows the 12-factor app methodology for configuration management. It automatically maps class attributes to environment variables using uppercase:</p> <pre><code># Set environment variables\nexport APP_DEBUG=true\nexport APP_PORT=9000\nexport APP_NAME=\"production-app\"\n\n# Python code\nconfig = AppConfig()\nprint(config.debug)    # True\nprint(config.port)     # 9000\nprint(config.app_name) # \"production-app\"\n</code></pre>"},{"location":"guides/guide_101/#4-working-with-lists-and-dictionaries","title":"4. Working with Lists and Dictionaries","text":"<p>For more complex data types:</p> <pre><code>from superconf.fields import FieldList, FieldDict\n\nclass AdvancedConfig(Configuration):\n    plugins = FieldList(default=[\"core\"], help=\"Enabled plugins\")\n    database = FieldDict(default={\n        \"host\": \"localhost\",\n        \"port\": 5432\n    }, help=\"Database configuration\")\n\n# Set via environment variables\nexport APP_PLUGINS=\"core,auth,cache\"\n# For dictionaries (future implementation):\nexport APP_DATABASE_HOST=\"db.example.com\"\nexport APP_DATABASE_PORT=\"5432\"\nexport APP_DATABASE_USER=\"admin\"\n\nconfig = AdvancedConfig()\nprint(config.plugins)  # [\"core\", \"auth\", \"cache\"]\n# Note: Dictionary environment variables support is planned for future releases\n</code></pre> <p>While dictionaries are useful for simple key-value configurations, for more complex nested structures, please refer to our Nested Configuration Guide.</p>"},{"location":"guides/guide_102_nested/","title":"Nested Configuration Guide","text":""},{"location":"guides/guide_102_nested/#1-basic-nested-configurations-of-configurations","title":"1. Basic Nested Configurations of configurations","text":"<p>This guide explains how to work with nested configurations in SuperConf, which is useful for organizing complex configuration structures.</p> <p>The most common way to create nested configurations is by defining separate configuration classes:</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldBool\n\nclass DatabaseConfig(Configuration):\n    host = FieldString(default=\"localhost\", help=\"Database host\")\n    port = FieldInt(default=5432, help=\"Database port\")\n    username = FieldString(help=\"Database username\")\n    password = FieldString(help=\"Database password\")\n\nclass RedisConfig(Configuration):\n    host = FieldString(default=\"localhost\", help=\"Redis host\")\n    port = FieldInt(default=6379, help=\"Redis port\")\n    db = FieldInt(default=0, help=\"Redis database number\")\n\nclass AppConfig(Configuration):\n    debug = FieldBool(default=False, help=\"Enable debug mode\")\n    database = DatabaseConfig\n    redis = RedisConfig\n\n# Example 1: Using default values\nconfig = AppConfig()\nprint(config.debug)              # False (default value)\nprint(config.database.host)      # \"localhost\" (default value)\nprint(config.redis.port)         # 6379 (default value)\nprint(config.database.username)  # None (no default value)\nprint(config.is_set('database.username'))  # False\n\n# Example 2: Overriding some values\nconfig = AppConfig(values={\n    'debug': True,\n    'database': {\n        'host': 'db.example.com',\n        'username': 'admin'\n    }\n})\nprint(config.debug)              # True (overridden)\nprint(config.database.host)      # \"db.example.com\" (overridden)\nprint(config.database.port)      # 5432 (still default)\nprint(config.database.username)  # \"admin\" (set value)\nprint(config.redis.host)         # \"localhost\" (default value)\n</code></pre>"},{"location":"guides/guide_102_nested/#2-deep-nesting","title":"2. Deep Nesting","text":"<p>You can nest configurations as deeply as needed:</p> <pre><code>class LoggingConfig(Configuration):\n    level = FieldString(default=\"INFO\")\n    format = FieldString(default=\"%(levelname)s: %(message)s\")\n\nclass ServiceConfig(Configuration):\n    url = FieldString(help=\"Service URL\")\n    timeout = FieldInt(default=30)\n    logging = LoggingConfig\n\nclass AppConfig(Configuration):\n    name = FieldString(default=\"myapp\")\n    service_a = ServiceConfig\n    service_b = ServiceConfig\n</code></pre> <p>Accessing Nested Values:</p> <pre><code>config = AppConfig()\nprint(config.service_a.logging.level)  # \"INFO\"\nprint(config.is_set('service_a.url'))  # False (required field not set)\n</code></pre>"},{"location":"guides/guide_102_nested/#4-dynamic-field-configurations","title":"4. Dynamic Field Configurations","text":"<p>For cases where you need to handle configurations with unknown fields or dynamic structures, SuperConf provides the <code>FieldConf</code> field type with the <code>children_class</code> parameter.</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldConf\n\nclass ServiceConfig(Configuration):\n    url = FieldString()\n    timeout = FieldInt(default=30)\n\nclass DynamicConfig(Configuration):\n    # Will accept any number of services as key-value pairs\n    services_as_dict = FieldDict(children_class=ServiceConfig)\n    services_as_list = FieldList(children_class=ServiceConfig)\n\n# Usage example\nconfig = DynamicConfig(values={\n    'services_as_dict': {\n        'auth': {'url': 'https://auth.example.com', 'timeout': 60},\n        'api': {'url': 'https://api.example.com'},\n        'cache': {'url': 'https://cache.example.com', 'timeout': 15}\n    },\n    'services_as_list': [\n        {'url': 'https://auth.example.com', 'timeout': 60},\n        {'url': 'https://api.example.com'},\n        {'url': 'https://cache.example.com', 'timeout': 15}\n    ]\n})\n\nprint(config.services_as_dict['auth'].timeout)  # 60\nprint(config.services_as_dict['api'].timeout)   # 30 (default value)\nprint(config.services_as_dict['cache'].url)     # \"https://cache.example.com\"\n\nprint(config.services_as_list[0].timeout)  # 60\nprint(config.services_as_list[1].timeout)   # 30 (default value)\nprint(config.services_as_list[2].url)     # \"https://cache.example.com\"\n</code></pre>"},{"location":"guides/guide_102_nested/#5-dynamic-field-configurations-with-custom-classes","title":"5. Dynamic Field Configurations with custom classes","text":""},{"location":"guides/guide_102_nested/#dictionary-of-configurations","title":"Dictionary of Configurations","text":"<p>To create a dictionary of configuration objects with dynamic keys:</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldConf\n\nclass ServiceConfig(Configuration):\n    url = FieldString()\n    timeout = FieldInt(default=30)\n\nclass DynamicConfig(Configuration):\n    # Will accept any number of services as key-value pairs\n    services = FieldConf(children_class=ServiceConfig)\n\n# Usage example\nconfig = DynamicConfig(values={\n    'services': {\n        'auth': {'url': 'https://auth.example.com', 'timeout': 60},\n        'api': {'url': 'https://api.example.com'},\n        'cache': {'url': 'https://cache.example.com', 'timeout': 15}\n    }\n})\n\nprint(config.services['auth'].timeout)  # 60\nprint(config.services['api'].timeout)   # 30 (default value)\nprint(config.services['cache'].url)     # \"https://cache.example.com\"\n</code></pre>"},{"location":"guides/guide_102_nested/#list-of-configurations","title":"List of Configurations","text":"<p>For handling lists of configuration objects:</p> <pre><code>from superconf.configuration import Configuration\nfrom superconf.fields import FieldString, FieldInt, FieldBool, FieldConf\n\nclass EndpointConfig(Configuration):\n    host = FieldString()\n    port = FieldInt(default=80)\n    secure = FieldBool(default=False)\n\nclass LoadBalancerConfig(ConfigurationList):\n    # Will accept a list of endpoints\n    endpoints = FieldConf(children_class=EndpointConfig)\n\n# Usage example\nconfig = LoadBalancerConfig(values=[\n        {'host': 'server1.example.com', 'port': 443, 'secure': True},\n        {'host': 'server2.example.com'},\n        {'host': 'server3.example.com', 'port': 8080}\n    ]\n)\n\nprint(config.endpoints[0].secure)  # True\nprint(config.endpoints[1].port)    # 80 (default value)\nprint(config.endpoints[2].host)    # \"server3.example.com\"\n</code></pre> <p>The <code>FieldConf</code> with <code>children_class</code> maintains all the benefits of SuperConf's type checking, validation, and environment variable support while providing flexibility for dynamic configurations. Use <code>is_list=True</code> when you need a list of configurations, and omit it for dictionary-style configurations.</p>"},{"location":"guides/guide_103_feeding_values/","title":"Value feeding","text":""},{"location":"guides/guide_103_feeding_values/#2-loading-nested-configurations","title":"2. Loading Nested Configurations","text":""},{"location":"guides/guide_103_feeding_values/#using-dictionary-values","title":"Using Dictionary Values","text":"<pre><code>config = AppConfig(values={\n    'debug': True,\n    'database': {\n        'host': 'db.example.com',\n        'port': 5432,\n        'username': 'admin',\n        'password': 'secret'\n    },\n    'redis': {\n        'host': 'redis.example.com',\n        'port': 6379,\n        'db': 1\n    }\n})\n\nprint(config.database.host)     # \"db.example.com\"\nprint(config.redis.port)        # 6379\n</code></pre>"},{"location":"guides/guide_103_feeding_values/#using-environment-variables","title":"Using Environment Variables","text":"<p>Environment variables for nested configurations follow a hierarchical naming pattern:</p> <pre><code># Database configuration\nexport APP_DATABASE_HOST=\"db.example.com\"\nexport APP_DATABASE_PORT=\"5432\"\nexport APP_DATABASE_USERNAME=\"admin\"\nexport APP_DATABASE_PASSWORD=\"secret\"\n\n# Redis configuration\nexport APP_REDIS_HOST=\"redis.example.com\"\nexport APP_REDIS_PORT=\"6379\"\nexport APP_REDIS_DB=\"1\"\n\n# Main configuration\nexport APP_DEBUG=\"true\"\n</code></pre>"},{"location":"info/code_of_conduct/","title":"Code of Conduct","text":""},{"location":"info/code_of_conduct/#contributor-covenant-code-of-conduct","title":"Contributor Covenant Code of Conduct","text":""},{"location":"info/code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.</p> <p>We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.</p>"},{"location":"info/code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment for our community include:</p> <ul> <li>Demonstrating empathy and kindness toward other people</li> <li>Being respectful of differing opinions, viewpoints, and experiences</li> <li>Giving and gracefully accepting constructive feedback</li> <li>Accepting responsibility and apologizing to those affected by our mistakes,   and learning from the experience</li> <li>Focusing on what is best not just for us as individuals, but for the overall   community</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery, and sexual attention or advances of   any kind</li> <li>Trolling, insulting or derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or email address,   without their explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"info/code_of_conduct/#enforcement-responsibilities","title":"Enforcement Responsibilities","text":"<p>Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.</p> <p>Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.</p>"},{"location":"info/code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.</p>"},{"location":"info/code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.</p> <p>All community leaders are obligated to respect the privacy and security of the reporter of any incident.</p>"},{"location":"info/code_of_conduct/#enforcement-guidelines","title":"Enforcement Guidelines","text":"<p>Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:</p>"},{"location":"info/code_of_conduct/#1-correction","title":"1. Correction","text":"<p>Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.</p> <p>Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.</p>"},{"location":"info/code_of_conduct/#2-warning","title":"2. Warning","text":"<p>Community Impact: A violation through a single incident or series of actions.</p> <p>Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.</p>"},{"location":"info/code_of_conduct/#3-temporary-ban","title":"3. Temporary Ban","text":"<p>Community Impact: A serious violation of community standards, including sustained inappropriate behavior.</p> <p>Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.</p>"},{"location":"info/code_of_conduct/#4-permanent-ban","title":"4. Permanent Ban","text":"<p>Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.</p> <p>Consequence: A permanent ban from any sort of public interaction within the community.</p>"},{"location":"info/code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.</p> <p>Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.</p> <p>For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations.</p>"},{"location":"info/contributing/","title":"Contributing","text":""},{"location":"info/contributing/#contributing-to-superconf","title":"Contributing to SuperConf","text":"<p>First off, thanks for taking the time to contribute! \u2764\ufe0f</p> <p>All types of contributions are encouraged and valued. See the Table of Contents for different ways to help and details about how this project handles them. Please make sure to read the relevant section before making your contribution. It will make it a lot easier for us maintainers and smooth out the experience for all involved. The community looks forward to your contributions. \ud83c\udf89</p> <p>And if you like the project, but just don't have time to contribute, that's fine. There are other easy ways to support the project and show your appreciation, which we would also be very happy about:</p> <ul> <li>Star the project</li> <li>Tweet about it</li> <li>Refer this project in your project's readme</li> <li>Mention the project at local meetups and tell your friends/colleagues</li> </ul>"},{"location":"info/contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>I Have a Question</li> <li>I Want To Contribute</li> <li>Reporting Bugs</li> <li>Suggesting Enhancements</li> <li>Your First Code Contribution</li> <li>Improving The Documentation</li> <li>Styleguides</li> <li>Commit Messages</li> <li>Join The Project Team</li> </ul>"},{"location":"info/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>This project and everyone participating in it is governed by the SuperConf Code of Conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to <code>&lt;mrjk _DOT_ 78 _AT_ gmail.com&gt;</code>.</p>"},{"location":"info/contributing/#i-have-a-question","title":"I Have a Question","text":"<p>If you want to ask a question, we assume that you have read the available Documentation.</p> <p>Before you ask a question, it is best to search for existing Issues that might help you. In case you have found a suitable issue and still need clarification, you can write your question in this issue. It is also advisable to search the internet for answers first.</p> <p>If you then still feel the need to ask a question and need clarification, we recommend the following:</p> <ul> <li>Open an Issue.</li> <li>Provide as much context as you can about what you're running into.</li> <li>Provide project and platform versions (nodejs, npm, etc), depending on what seems relevant.</li> </ul> <p>We will then take care of the issue as soon as possible.</p>"},{"location":"info/contributing/#i-want-to-contribute","title":"I Want To Contribute","text":""},{"location":"info/contributing/#legal-notice","title":"Legal Notice","text":"<p>When contributing to this project, you must agree that you have authored 100% of the content, that you have the necessary rights to the content and that the content you contribute may be provided under the project license.</p>"},{"location":"info/contributing/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"info/contributing/#before-submitting-a-bug-report","title":"Before Submitting a Bug Report","text":"<p>A good bug report shouldn't leave others needing to chase you up for more information. Therefore, we ask you to investigate carefully, collect information and describe the issue in detail in your report. Please complete the following steps in advance to help us fix any potential bug as fast as possible.</p> <ul> <li>Make sure that you are using the latest version.</li> <li>Determine if your bug is really a bug and not an error on your side e.g. using incompatible environment components/versions (Make sure that you have read the documentation. If you are looking for support, you might want to check this section).</li> <li>To see if other users have experienced (and potentially already solved) the same issue you are having, check if there is not already a bug report existing for your bug or error in the bug tracker.</li> <li>Also make sure to search the internet (including Stack Overflow) to see if users outside of the GitHub community have discussed the issue.</li> <li>Collect information about the bug:</li> <li>Stack trace (Traceback)</li> <li>OS, Platform and Version (Windows, Linux, macOS, x86, ARM)</li> <li>Version of the interpreter, compiler, SDK, runtime environment, package manager, depending on what seems relevant.</li> <li>Possibly your input and the output</li> <li>Can you reliably reproduce the issue? And can you also reproduce it with older versions?</li> </ul>"},{"location":"info/contributing/#how-do-i-submit-a-good-bug-report","title":"How Do I Submit a Good Bug Report?","text":"<p>You must never report security related issues, vulnerabilities or bugs including sensitive information to the issue tracker, or elsewhere in public. Instead sensitive bugs must be sent by email to contact@mrjk.com.</p> <p>We use GitHub issues to track bugs and errors. If you run into an issue with the project:</p> <ul> <li>Open an Issue. (Since we can't be sure at this point whether it is a bug or not, we ask you not to talk about a bug yet and not to label the issue.)</li> <li>Explain the behavior you would expect and the actual behavior.</li> <li>Please provide as much context as possible and describe the reproduction steps that someone else can follow to recreate the issue on their own. This usually includes your code. For good bug reports you should isolate the problem and create a reduced test case.</li> <li>Provide the information you collected in the previous section.</li> </ul> <p>Once it's filed:</p> <ul> <li>The project team will label the issue accordingly.</li> <li>A team member will try to reproduce the issue with your provided steps. If there are no reproduction steps or no obvious way to reproduce the issue, the team will ask you for those steps and mark the issue as <code>needs-repro</code>. Bugs with the <code>needs-repro</code> tag will not be addressed until they are reproduced.</li> <li>If the team is able to reproduce the issue, it will be marked <code>needs-fix</code>, as well as possibly other tags (such as <code>critical</code>), and the issue will be left to be implemented by someone.</li> </ul>"},{"location":"info/contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>This section guides you through submitting an enhancement suggestion for SuperConf, including completely new features and minor improvements to existing functionality. Following these guidelines will help maintainers and the community to understand your suggestion and find related suggestions.</p>"},{"location":"info/contributing/#before-submitting-an-enhancement","title":"Before Submitting an Enhancement","text":"<ul> <li>Make sure that you are using the latest version.</li> <li>Read the documentation carefully and find out if the functionality is already covered, maybe by an individual configuration.</li> <li>Perform a search to see if the enhancement has already been suggested. If it has, add a comment to the existing issue instead of opening a new one.</li> <li>Find out whether your idea fits with the scope and aims of the project. It's up to you to make a strong case to convince the project's developers of the merits of this feature. Keep in mind that we want features that will be useful to the majority of our users and not just a small subset. If you're just targeting a minority of users, consider writing an add-on/plugin library.</li> </ul>"},{"location":"info/contributing/#how-do-i-submit-a-good-enhancement-suggestion","title":"How Do I Submit a Good Enhancement Suggestion?","text":"<p>Enhancement suggestions are tracked as GitHub issues.</p> <ul> <li>Use a clear and descriptive title for the issue to identify the suggestion.</li> <li>Provide a step-by-step description of the suggested enhancement in as many details as possible.</li> <li>Describe the current behavior and explain which behavior you expected to see instead and why. At this point you can also tell which alternatives do not work for you.</li> <li>You may want to include screenshots and animated GIFs which help you demonstrate the steps or point out the part which the suggestion is related to. You can use this tool to record GIFs on macOS and Windows, and this tool or this tool on Linux. </li> <li>Explain why this enhancement would be useful to most SuperConf users. You may also want to point out the other projects that solved it better and which could serve as inspiration.</li> </ul>"},{"location":"info/contributing/#your-first-code-contribution","title":"Your First Code Contribution","text":"<p>Please learn how to configure your development envrionment then how to contribute to SuperConf.</p>"},{"location":"info/contributing/#improving-the-documentation","title":"Improving The Documentation","text":"<p>Please check related documentation</p>"},{"location":"info/contributing/#styleguides","title":"Styleguides","text":""},{"location":"info/contributing/#commit-messages","title":"Commit Messages","text":"<p>Please check related documentation</p>"},{"location":"info/contributing/#join-the-project-team","title":"Join The Project Team","text":"<p>Please contact main maintener.</p>"},{"location":"info/contributing/#attribution","title":"Attribution","text":"<p>This guide is based on the contributing-gen. Make your own!</p>"},{"location":"info/license/","title":"GNU GPL","text":"<pre><code>                                                     GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. &lt;https://fsf.org/&gt;\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    &lt;one line to give the program's name and a brief idea of what it does.&gt;\n    Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see &lt;https://www.gnu.org/licenses/&gt;.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    &lt;program&gt;  Copyright (C) &lt;year&gt;  &lt;name of author&gt;\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n&lt;https://www.gnu.org/licenses/&gt;.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n&lt;https://www.gnu.org/licenses/why-not-lgpl.html&gt;.\n</code></pre>"},{"location":"reference/anchors/","title":"Module API - Anchors","text":""},{"location":"reference/anchors/#superconf.anchors","title":"<code>superconf.anchors</code>","text":"<p>Path anchoring and manipulation library for flexible path resolution.</p> <p>This module provides classes for handling paths with anchor points, allowing for flexible path resolution relative to different base directories. It's particularly useful for configuration management and file organization where paths need to be resolved relative to different root directories.</p> Main Components <ul> <li>PathAnchor: Base class for handling directory paths with anchor points</li> <li>FileAnchor: Extension of PathAnchor for handling file paths specifically</li> </ul> Key Features <ul> <li>Path resolution relative to anchor points</li> <li>Support for both absolute and relative path modes</li> <li>Chain of anchor points for complex path hierarchies</li> <li>Clean path normalization</li> <li>Flexible path representation</li> </ul> <p>Examples:</p> <p>Basic path anchoring:</p> <pre><code>&gt;&gt;&gt; project_dir = \"/fake/prj\"\n&gt;&gt;&gt; root = PathAnchor(project_dir)\n&gt;&gt;&gt; conf = PathAnchor(\"../../common_conf\", anchor=root, mode=\"abs\")\n&gt;&gt;&gt; inventory = PathAnchor(\"inventory/\", anchor=conf, mode=\"rel\")\n&gt;&gt;&gt; \n&gt;&gt;&gt; # Get paths in different modes\n&gt;&gt;&gt; conf.get_dir()  # Returns absolute path\n'/fake/common_conf'\n&gt;&gt;&gt; inventory.get_dir()  # Returns relative path\n'../../inventory'\n</code></pre> <p>File handling:</p> <pre><code>&gt;&gt;&gt; root = PathAnchor(\"/fake/prj\")\n&gt;&gt;&gt; config_file = FileAnchor(\"subconf/myfile.yml\", anchor=root)\n&gt;&gt;&gt; config_file.get_path()  # Full path\n'/fake/prj/subconf/myfile.yml'\n&gt;&gt;&gt; config_file.get_file()  # Just filename\n'myfile.yml'\n&gt;&gt;&gt; config_file.get_dir()   # Just directory\n'/fake/prj/subconf'\n</code></pre> <p>Complex path resolution:</p> <pre><code>&gt;&gt;&gt; project = PathAnchor(\"/fake_root/project\")\n&gt;&gt;&gt; path = PathAnchor(\"subdir2/../../subdir2/file\", anchor=project)\n&gt;&gt;&gt; path.get_dir(clean=True)  # Normalizes the path\n'/fake_root/subdir2/file'\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.FileAnchor","title":"<code>FileAnchor</code>","text":"<p>               Bases: <code>PathAnchor</code></p> <p>A class representing a file path with optional anchor point and display mode.</p> <p>This class extends PathAnchor to handle file paths specifically, maintaining separate tracking of directory and filename components.</p> <p>Attributes:</p> Name Type Description <code>path_dir</code> <p>The directory component of the path</p> <code>path_file</code> <p>The filename component of the path</p> <code>path_anchor</code> <p>The anchor point for relative paths</p> <code>path_mode</code> <p>The display mode ('abs' or 'rel')</p> Source code in <code>superconf/anchors.py</code> <pre><code>class FileAnchor(PathAnchor):\n    \"\"\"A class representing a file path with optional anchor point and display mode.\n\n    This class extends PathAnchor to handle file paths specifically, maintaining\n    separate tracking of directory and filename components.\n\n    Attributes:\n        path_dir: The directory component of the path\n        path_file: The filename component of the path\n        path_anchor: The anchor point for relative paths\n        path_mode: The display mode ('abs' or 'rel')\n    \"\"\"\n\n    # pylint: disable=too-many-arguments, too-many-positional-arguments\n    def __init__(\n        self,\n        path: str,\n        directory: Optional[str] = None,\n        filename: Optional[str] = None,\n        mode: Optional[str] = None,\n        anchor: Optional[\"PathAnchor\"] = None,\n    ):\n        \"\"\"Initialize a FileAnchor object.\n\n        The path can be specified either as a full path or as separate directory\n        and file components.\n\n        Args:\n            path (str): The complete file path\n            directory (Optional[str], optional): The directory component. If provided with filename,\n                path parameter is ignored. Defaults to None.\n            filename (Optional[str], optional): The filename component. Defaults to None.\n            mode (Optional[str], optional): Display mode for path rendering.\n                Can be 'abs' for absolute paths or 'rel' for relative paths.\n                If None, the mode remains unchanged. Defaults to None.\n            anchor (Optional[PathAnchor], optional): Another PathAnchor object to use\n                as reference point. Defaults to None.\n\n        Raises:\n            AssertionError: If the provided path components don't match the expected format\n        \"\"\"\n        if directory and filename:\n            # Ignore path\n            path = os.path.join(directory, filename)\n        elif path and filename:\n            path = os.path.join(path, filename)\n            directory = path\n        elif path and directory:\n            assert path.startswith(directory)\n            filename = path[len(directory) :]\n        elif path:\n            directory, filename = os.path.split(path)\n\n        assert path == os.path.join(\n            directory, filename\n        ), f\"Got: {path} == {os.path.join(directory, filename)}\"\n\n        super().__init__(directory, mode=mode, anchor=anchor)\n        self.path_file = filename\n\n    def get_path(self, **kwargs) -&gt; str:\n        \"\"\"Get the complete file path.\n\n        This method combines the directory path from get_dir() with the filename.\n        All kwargs are passed to get_dir().\n\n        Returns:\n            str: The complete file path (directory + filename)\n        \"\"\"\n        return os.path.join(self.get_dir(**kwargs), self.get_file())\n\n    def get_file(self) -&gt; str:\n        \"\"\"Get the filename component of the path.\n\n        Returns:\n            str: The filename without directory path\n        \"\"\"\n        return self.path_file\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.FileAnchor.__init__","title":"<code>__init__(path, directory=None, filename=None, mode=None, anchor=None)</code>","text":"<p>Initialize a FileAnchor object.</p> <p>The path can be specified either as a full path or as separate directory and file components.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The complete file path</p> required <code>directory</code> <code>Optional[str]</code> <p>The directory component. If provided with filename, path parameter is ignored. Defaults to None.</p> <code>None</code> <code>filename</code> <code>Optional[str]</code> <p>The filename component. Defaults to None.</p> <code>None</code> <code>mode</code> <code>Optional[str]</code> <p>Display mode for path rendering. Can be 'abs' for absolute paths or 'rel' for relative paths. If None, the mode remains unchanged. Defaults to None.</p> <code>None</code> <code>anchor</code> <code>Optional[PathAnchor]</code> <p>Another PathAnchor object to use as reference point. Defaults to None.</p> <code>None</code> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If the provided path components don't match the expected format</p> Source code in <code>superconf/anchors.py</code> <pre><code>def __init__(\n    self,\n    path: str,\n    directory: Optional[str] = None,\n    filename: Optional[str] = None,\n    mode: Optional[str] = None,\n    anchor: Optional[\"PathAnchor\"] = None,\n):\n    \"\"\"Initialize a FileAnchor object.\n\n    The path can be specified either as a full path or as separate directory\n    and file components.\n\n    Args:\n        path (str): The complete file path\n        directory (Optional[str], optional): The directory component. If provided with filename,\n            path parameter is ignored. Defaults to None.\n        filename (Optional[str], optional): The filename component. Defaults to None.\n        mode (Optional[str], optional): Display mode for path rendering.\n            Can be 'abs' for absolute paths or 'rel' for relative paths.\n            If None, the mode remains unchanged. Defaults to None.\n        anchor (Optional[PathAnchor], optional): Another PathAnchor object to use\n            as reference point. Defaults to None.\n\n    Raises:\n        AssertionError: If the provided path components don't match the expected format\n    \"\"\"\n    if directory and filename:\n        # Ignore path\n        path = os.path.join(directory, filename)\n    elif path and filename:\n        path = os.path.join(path, filename)\n        directory = path\n    elif path and directory:\n        assert path.startswith(directory)\n        filename = path[len(directory) :]\n    elif path:\n        directory, filename = os.path.split(path)\n\n    assert path == os.path.join(\n        directory, filename\n    ), f\"Got: {path} == {os.path.join(directory, filename)}\"\n\n    super().__init__(directory, mode=mode, anchor=anchor)\n    self.path_file = filename\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.FileAnchor.get_file","title":"<code>get_file()</code>","text":"<p>Get the filename component of the path.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The filename without directory path</p> Source code in <code>superconf/anchors.py</code> <pre><code>def get_file(self) -&gt; str:\n    \"\"\"Get the filename component of the path.\n\n    Returns:\n        str: The filename without directory path\n    \"\"\"\n    return self.path_file\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.FileAnchor.get_path","title":"<code>get_path(**kwargs)</code>","text":"<p>Get the complete file path.</p> <p>This method combines the directory path from get_dir() with the filename. All kwargs are passed to get_dir().</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The complete file path (directory + filename)</p> Source code in <code>superconf/anchors.py</code> <pre><code>def get_path(self, **kwargs) -&gt; str:\n    \"\"\"Get the complete file path.\n\n    This method combines the directory path from get_dir() with the filename.\n    All kwargs are passed to get_dir().\n\n    Returns:\n        str: The complete file path (directory + filename)\n    \"\"\"\n    return os.path.join(self.get_dir(**kwargs), self.get_file())\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor","title":"<code>PathAnchor</code>","text":"<p>A class representing a path with an optional anchor point and display mode.</p> <p>This class handles path operations with support for anchored paths, allowing paths to be relative to a specified anchor point. It also supports different display modes (absolute or relative paths).</p> <p>Attributes:</p> Name Type Description <code>path_anchor</code> <p>The anchor point for relative paths</p> <code>path_dir</code> <p>The directory path</p> <code>path_mode</code> <p>The display mode ('abs' or 'rel')</p> Source code in <code>superconf/anchors.py</code> <pre><code>class PathAnchor:\n    \"\"\"A class representing a path with an optional anchor point and display mode.\n\n    This class handles path operations with support for anchored paths, allowing paths\n    to be relative to a specified anchor point. It also supports different display modes\n    (absolute or relative paths).\n\n    Attributes:\n        path_anchor: The anchor point for relative paths\n        path_dir: The directory path\n        path_mode: The display mode ('abs' or 'rel')\n    \"\"\"\n\n    def __init__(\n        self,\n        path: str,\n        mode: Optional[str] = None,\n        anchor: Optional[\"PathAnchor\"] = None,\n    ):\n        \"\"\"Initialize a PathAnchor object.\n\n        Args:\n            path (str): The path to use\n            mode (Optional[str], optional): Display mode for path rendering.\n                Can be 'abs' for absolute paths or 'rel' for relative paths.\n                If None, the mode remains unchanged. Defaults to None.\n            anchor (Optional[PathAnchor], optional): Another PathAnchor object to use as\n                reference point.\n                Defaults to None.\n        \"\"\"\n        self.path_anchor = anchor\n        self.path_dir = path\n        self.path_mode = mode\n\n    def __repr__(self) -&gt; str:\n        \"\"\"Return a string representation of the PathAnchor object.\n\n        Returns:\n            str: A string representation showing the path, anchor (if present), and mode (if set)\n        \"\"\"\n        name = self.__class__.__name__\n        ret = f\"&lt;{name} {self.get_path()}\"\n\n        # Change if anchored\n        anchor = self.path_anchor\n        if anchor:\n            ret = f\"&lt;{name} [{anchor.get_dir()}]{self.get_path()}\"\n\n        # Add suffix\n        suffix = \"&gt;\"\n        if self.path_mode:\n            suffix = f\" (mode={self.path_mode})&gt;\"\n        return ret + suffix\n\n    def get_mode(self, lvl: int = 0) -&gt; Optional[str]:\n        \"\"\"Get the effective display mode for this path.\n\n        If this object has no mode set but has an anchor, it will recursively\n        check the anchor's mode.\n\n        Args:\n            lvl (int, optional): Current recursion level. Defaults to 0.\n\n        Returns:\n            Optional[str]: The effective mode ('abs' or 'rel') or None if no mode is set\n        \"\"\"\n        if isinstance(self.path_mode, str):\n            return self.path_mode\n\n        if self.path_anchor:\n            lvl += 1\n            return self.path_anchor.get_mode(lvl=lvl)\n        return None\n\n    def get_parents(self, itself: bool = False) -&gt; List:\n        \"\"\"Get a list of all parent anchors in the anchor chain.\n\n        Args:\n            itself (bool, optional): Include the current object in the result if True.\n                Defaults to False.\n\n        Returns:\n            list[PathAnchor]: List of parent PathAnchor objects, ordered from current to root\n        \"\"\"\n        ret = []\n        ret.append(self)\n\n        if self.path_anchor:\n            tmp = self.path_anchor.get_parents(itself=True)\n            ret.extend(tmp)\n\n        if not itself:\n            ret = ret[1:]\n        return ret\n\n    def get_dir(\n        self,\n        mode: Optional[str] = None,\n        clean: Optional[bool] = False,\n        start: Optional[str] = None,\n        anchor: Optional[\"PathAnchor\"] = None,\n    ) -&gt; str:\n        \"\"\"Get the directory path according to specified parameters.\n\n        Args:\n            mode (Optional[str], optional): Output path format.\n                Can be 'abs' for absolute path or 'rel' for relative path.\n                If None, uses the object's mode setting. Defaults to None.\n            clean (Optional[bool], optional): If True, normalizes the path by resolving\n                '..' and '.' components. Defaults to False.\n            start (Optional[str], optional): Base directory for relative path calculation\n                when mode is 'rel'. Defaults to current working directory.\n            anchor (Optional[PathAnchor], optional): Override the anchor point for this\n                operation. Defaults to None.\n\n        Returns:\n            str: The processed directory path\n\n        Raises:\n            AssertionError: If an invalid mode is specified\n        \"\"\"\n        ret = None\n        mode = mode or self.get_mode()\n        start = start or os.getcwd()\n\n        # Resolve name\n        if os.path.isabs(self.path_dir):\n            ret = self.path_dir\n        else:\n            anchor = anchor or self.path_anchor\n            if anchor:\n                ret = os.path.join(anchor.path_dir, self.path_dir)\n            else:\n                ret = self.path_dir\n\n        # Clean\n        if clean:\n            ret = os.path.normpath(ret)\n\n        # Ensure output format\n        if mode == \"rel\":\n            if os.path.isabs(ret):\n                ret = os.path.relpath(ret, start=start)\n        elif mode == \"abs\":\n            if not os.path.isabs(ret):\n                ret = os.path.abspath(ret)\n        elif mode is None:\n            pass\n        else:\n            raise ValueError(f\"Invalid mode: {mode}\")\n\n        return ret\n\n    def get_path(self, **kwargs) -&gt; str:\n        \"\"\"Get the path using the same parameters as get_dir.\n\n        Returns:\n            str: The processed path\n        \"\"\"\n        return self.get_dir(**kwargs)\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor.__init__","title":"<code>__init__(path, mode=None, anchor=None)</code>","text":"<p>Initialize a PathAnchor object.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to use</p> required <code>mode</code> <code>Optional[str]</code> <p>Display mode for path rendering. Can be 'abs' for absolute paths or 'rel' for relative paths. If None, the mode remains unchanged. Defaults to None.</p> <code>None</code> <code>anchor</code> <code>Optional[PathAnchor]</code> <p>Another PathAnchor object to use as reference point. Defaults to None.</p> <code>None</code> Source code in <code>superconf/anchors.py</code> <pre><code>def __init__(\n    self,\n    path: str,\n    mode: Optional[str] = None,\n    anchor: Optional[\"PathAnchor\"] = None,\n):\n    \"\"\"Initialize a PathAnchor object.\n\n    Args:\n        path (str): The path to use\n        mode (Optional[str], optional): Display mode for path rendering.\n            Can be 'abs' for absolute paths or 'rel' for relative paths.\n            If None, the mode remains unchanged. Defaults to None.\n        anchor (Optional[PathAnchor], optional): Another PathAnchor object to use as\n            reference point.\n            Defaults to None.\n    \"\"\"\n    self.path_anchor = anchor\n    self.path_dir = path\n    self.path_mode = mode\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the PathAnchor object.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>A string representation showing the path, anchor (if present), and mode (if set)</p> Source code in <code>superconf/anchors.py</code> <pre><code>def __repr__(self) -&gt; str:\n    \"\"\"Return a string representation of the PathAnchor object.\n\n    Returns:\n        str: A string representation showing the path, anchor (if present), and mode (if set)\n    \"\"\"\n    name = self.__class__.__name__\n    ret = f\"&lt;{name} {self.get_path()}\"\n\n    # Change if anchored\n    anchor = self.path_anchor\n    if anchor:\n        ret = f\"&lt;{name} [{anchor.get_dir()}]{self.get_path()}\"\n\n    # Add suffix\n    suffix = \"&gt;\"\n    if self.path_mode:\n        suffix = f\" (mode={self.path_mode})&gt;\"\n    return ret + suffix\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor.get_dir","title":"<code>get_dir(mode=None, clean=False, start=None, anchor=None)</code>","text":"<p>Get the directory path according to specified parameters.</p> <p>Parameters:</p> Name Type Description Default <code>mode</code> <code>Optional[str]</code> <p>Output path format. Can be 'abs' for absolute path or 'rel' for relative path. If None, uses the object's mode setting. Defaults to None.</p> <code>None</code> <code>clean</code> <code>Optional[bool]</code> <p>If True, normalizes the path by resolving '..' and '.' components. Defaults to False.</p> <code>False</code> <code>start</code> <code>Optional[str]</code> <p>Base directory for relative path calculation when mode is 'rel'. Defaults to current working directory.</p> <code>None</code> <code>anchor</code> <code>Optional[PathAnchor]</code> <p>Override the anchor point for this operation. Defaults to None.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The processed directory path</p> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If an invalid mode is specified</p> Source code in <code>superconf/anchors.py</code> <pre><code>def get_dir(\n    self,\n    mode: Optional[str] = None,\n    clean: Optional[bool] = False,\n    start: Optional[str] = None,\n    anchor: Optional[\"PathAnchor\"] = None,\n) -&gt; str:\n    \"\"\"Get the directory path according to specified parameters.\n\n    Args:\n        mode (Optional[str], optional): Output path format.\n            Can be 'abs' for absolute path or 'rel' for relative path.\n            If None, uses the object's mode setting. Defaults to None.\n        clean (Optional[bool], optional): If True, normalizes the path by resolving\n            '..' and '.' components. Defaults to False.\n        start (Optional[str], optional): Base directory for relative path calculation\n            when mode is 'rel'. Defaults to current working directory.\n        anchor (Optional[PathAnchor], optional): Override the anchor point for this\n            operation. Defaults to None.\n\n    Returns:\n        str: The processed directory path\n\n    Raises:\n        AssertionError: If an invalid mode is specified\n    \"\"\"\n    ret = None\n    mode = mode or self.get_mode()\n    start = start or os.getcwd()\n\n    # Resolve name\n    if os.path.isabs(self.path_dir):\n        ret = self.path_dir\n    else:\n        anchor = anchor or self.path_anchor\n        if anchor:\n            ret = os.path.join(anchor.path_dir, self.path_dir)\n        else:\n            ret = self.path_dir\n\n    # Clean\n    if clean:\n        ret = os.path.normpath(ret)\n\n    # Ensure output format\n    if mode == \"rel\":\n        if os.path.isabs(ret):\n            ret = os.path.relpath(ret, start=start)\n    elif mode == \"abs\":\n        if not os.path.isabs(ret):\n            ret = os.path.abspath(ret)\n    elif mode is None:\n        pass\n    else:\n        raise ValueError(f\"Invalid mode: {mode}\")\n\n    return ret\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor.get_mode","title":"<code>get_mode(lvl=0)</code>","text":"<p>Get the effective display mode for this path.</p> <p>If this object has no mode set but has an anchor, it will recursively check the anchor's mode.</p> <p>Parameters:</p> Name Type Description Default <code>lvl</code> <code>int</code> <p>Current recursion level. Defaults to 0.</p> <code>0</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Optional[str]: The effective mode ('abs' or 'rel') or None if no mode is set</p> Source code in <code>superconf/anchors.py</code> <pre><code>def get_mode(self, lvl: int = 0) -&gt; Optional[str]:\n    \"\"\"Get the effective display mode for this path.\n\n    If this object has no mode set but has an anchor, it will recursively\n    check the anchor's mode.\n\n    Args:\n        lvl (int, optional): Current recursion level. Defaults to 0.\n\n    Returns:\n        Optional[str]: The effective mode ('abs' or 'rel') or None if no mode is set\n    \"\"\"\n    if isinstance(self.path_mode, str):\n        return self.path_mode\n\n    if self.path_anchor:\n        lvl += 1\n        return self.path_anchor.get_mode(lvl=lvl)\n    return None\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor.get_parents","title":"<code>get_parents(itself=False)</code>","text":"<p>Get a list of all parent anchors in the anchor chain.</p> <p>Parameters:</p> Name Type Description Default <code>itself</code> <code>bool</code> <p>Include the current object in the result if True. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>List</code> <p>list[PathAnchor]: List of parent PathAnchor objects, ordered from current to root</p> Source code in <code>superconf/anchors.py</code> <pre><code>def get_parents(self, itself: bool = False) -&gt; List:\n    \"\"\"Get a list of all parent anchors in the anchor chain.\n\n    Args:\n        itself (bool, optional): Include the current object in the result if True.\n            Defaults to False.\n\n    Returns:\n        list[PathAnchor]: List of parent PathAnchor objects, ordered from current to root\n    \"\"\"\n    ret = []\n    ret.append(self)\n\n    if self.path_anchor:\n        tmp = self.path_anchor.get_parents(itself=True)\n        ret.extend(tmp)\n\n    if not itself:\n        ret = ret[1:]\n    return ret\n</code></pre>"},{"location":"reference/anchors/#superconf.anchors.PathAnchor.get_path","title":"<code>get_path(**kwargs)</code>","text":"<p>Get the path using the same parameters as get_dir.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The processed path</p> Source code in <code>superconf/anchors.py</code> <pre><code>def get_path(self, **kwargs) -&gt; str:\n    \"\"\"Get the path using the same parameters as get_dir.\n\n    Returns:\n        str: The processed path\n    \"\"\"\n    return self.get_dir(**kwargs)\n</code></pre>"},{"location":"reference/cast/","title":"Module API - Cast","text":""},{"location":"reference/cast/#superconf.casts","title":"<code>superconf.casts</code>","text":"<p>Support value casting</p>"},{"location":"reference/cast/#superconf.casts.AbstractCast","title":"<code>AbstractCast</code>","text":"<p>Base class for all cast operations.</p> <p>This abstract class defines the interface that all cast implementations must follow. Subclasses must implement the call method to perform the actual casting operation.</p> Source code in <code>superconf/casts.py</code> <pre><code>class AbstractCast:\n    \"\"\"Base class for all cast operations.\n\n    This abstract class defines the interface that all cast implementations must follow.\n    Subclasses must implement the __call__ method to perform the actual casting operation.\n    \"\"\"\n\n    def __call__(self, value):\n        raise NotImplementedError()  # pragma: no cover\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsBest","title":"<code>AsBest</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value to its most appropriate Python type.</p> <p>Attempts to intelligently determine and convert the input value to the most suitable Python type by trying different conversions in order: 1. None for null/empty values 2. Boolean for true/false-like strings 3. Integer for numeric strings without decimals 4. Float for numeric strings with decimals 5. List for comma-separated strings or sequence-like inputs 6. Dict for mapping-like inputs 7. Original string if no other conversion succeeds</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cast = AsBest()\n&gt;&gt;&gt; cast('123')  # Returns: 123 (int)\n&gt;&gt;&gt; cast('3.14')  # Returns: 3.14 (float)\n&gt;&gt;&gt; cast('true')  # Returns: True (bool)\n&gt;&gt;&gt; cast('a,b,c')  # Returns: ['a', 'b', 'c'] (list)\n</code></pre> Source code in <code>superconf/casts.py</code> <pre><code>class AsBest(AbstractCast):\n    \"\"\"Cast a value to its most appropriate Python type.\n\n    Attempts to intelligently determine and convert the input value to the most\n    suitable Python type by trying different conversions in order:\n    1. None for null/empty values\n    2. Boolean for true/false-like strings\n    3. Integer for numeric strings without decimals\n    4. Float for numeric strings with decimals\n    5. List for comma-separated strings or sequence-like inputs\n    6. Dict for mapping-like inputs\n    7. Original string if no other conversion succeeds\n\n    Examples:\n        &gt;&gt;&gt; cast = AsBest()\n        &gt;&gt;&gt; cast('123')  # Returns: 123 (int)\n        &gt;&gt;&gt; cast('3.14')  # Returns: 3.14 (float)\n        &gt;&gt;&gt; cast('true')  # Returns: True (bool)\n        &gt;&gt;&gt; cast('a,b,c')  # Returns: ['a', 'b', 'c'] (list)\n    \"\"\"\n\n    def __init__(self, delimiter=\",\", quotes=\"\\\"'\"):\n        self.delimiter = delimiter\n        self.list_caster = AsList(delimiter=delimiter, quotes=quotes)\n        self.dict_caster = AsDict(delimiter=delimiter, quotes=quotes)\n\n    def __call__(self, value):\n        if not value:\n            return None\n\n        # Try boolean first for true/false strings\n        if isinstance(value, str):\n\n            # Try integer\n            try:\n                if \".\" not in value:\n                    return int(value)\n            except ValueError:\n                pass\n\n            # Try float\n            try:\n                return float(value)\n            except ValueError:\n                pass\n\n            # Try list (if contains delimiter)\n            if self.delimiter and self.delimiter in value:\n                try:\n                    return self.list_caster(value)\n                except (InvalidCastConfiguration, AssertionError):\n                    pass\n\n        # Try dict for mapping types\n        if isinstance(value, Mapping):\n            try:\n                return self.dict_caster(value)\n            except (InvalidCastConfiguration, AssertionError):\n                pass\n\n        # Try list for sequence types\n        if isinstance(value, Sequence) and not isinstance(value, str):\n            try:\n                return self.list_caster(value)\n            except (InvalidCastConfiguration, AssertionError):\n                pass\n\n        # Return as is if no conversion succeeded\n        return value\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsBoolean","title":"<code>AsBoolean</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value to a boolean using predefined string mappings.</p> <p>Converts various string representations to boolean values using a configurable mapping dictionary. By default, supports common boolean string representations like 'true', 'yes', 'on', '1' for True and their counterparts for False.</p> <p>Parameters:</p> Name Type Description Default <code>values</code> <code>dict</code> <p>A dictionary mapping strings to boolean values. If provided, updates the default mapping dictionary.</p> <code>None</code> <p>Raises:</p> Type Description <code>InvalidCastConfiguration</code> <p>If the input value cannot be cast to a boolean.</p> Source code in <code>superconf/casts.py</code> <pre><code>class AsBoolean(AbstractCast):\n    \"\"\"Cast a value to a boolean using predefined string mappings.\n\n    Converts various string representations to boolean values using a configurable\n    mapping dictionary. By default, supports common boolean string representations\n    like 'true', 'yes', 'on', '1' for True and their counterparts for False.\n\n    Args:\n        values (dict, optional): A dictionary mapping strings to boolean values.\n            If provided, updates the default mapping dictionary.\n\n    Raises:\n        InvalidCastConfiguration: If the input value cannot be cast to a boolean.\n    \"\"\"\n\n    default_values = {\n        \"1\": True,\n        \"true\": True,\n        \"yes\": True,\n        \"y\": True,\n        \"on\": True,\n        \"t\": True,\n        \"0\": False,\n        \"false\": False,\n        \"no\": False,\n        \"n\": False,\n        \"off\": False,\n        \"f\": False,\n    }\n\n    def __init__(self, values=None):\n        self.values = self.default_values.copy()\n        if isinstance(values, dict):\n            self.values.update(values)\n\n    def __call__(self, value):\n        try:\n            return self.values[str(value).lower()]\n        except KeyError as err:\n            raise InvalidCastConfiguration(\n                f\"Error casting value {value} to boolean\"\n            ) from err\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsDict","title":"<code>AsDict</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value to a dictionary.</p> <p>Currently supports: - Empty values become empty dictionaries - Mapping objects are converted directly to dictionaries</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>Reserved for future string parsing. Defaults to ','.</p> <code>','</code> <code>quotes</code> <code>str</code> <p>Reserved for future string parsing. Defaults to '\"''.</p> <code>'\"\\''</code> Note <p>String parsing is not yet implemented.</p> Source code in <code>superconf/casts.py</code> <pre><code>class AsDict(AbstractCast):\n    \"\"\"Cast a value to a dictionary.\n\n    Currently supports:\n    - Empty values become empty dictionaries\n    - Mapping objects are converted directly to dictionaries\n\n    Args:\n        delimiter (str, optional): Reserved for future string parsing. Defaults to ','.\n        quotes (str, optional): Reserved for future string parsing. Defaults to '\"\\''.\n\n    Note:\n        String parsing is not yet implemented.\n    \"\"\"\n\n    def __init__(self, delimiter=\",\", quotes=\"\\\"'\"):\n        self.delimiter = delimiter\n        self.quotes = quotes\n\n    def cast(self, sequence):\n        \"Cast value\"\n        return dict(sequence)\n\n    def __call__(self, value):\n        return self._parse(value)\n\n    def _parse(self, value):\n        \"Internal helper to parse values\"\n\n        if not value:\n            # print (\"PARSE AS EMPTY\", value)\n            return self.cast({})\n\n        if isinstance(value, str):\n            assert False, \"String  parsing is not implemeted yet\"\n            # print (\"PARSE AS STRING\", value)\n            # return self._parse_string(value)\n\n        if isinstance(value, Mapping):\n            # print (\"PARSE AS LIST\", value)\n            return self.cast(value)\n        if isinstance(value, Sequence):\n            assert False, f\"TOFIX: Unsupported type list, {value}\"\n\n        assert False\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsDict.cast","title":"<code>cast(sequence)</code>","text":"<p>Cast value</p> Source code in <code>superconf/casts.py</code> <pre><code>def cast(self, sequence):\n    \"Cast value\"\n    return dict(sequence)\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsIdentity","title":"<code>AsIdentity</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Return the input value unchanged.</p> <p>A no-operation cast that simply returns the input value without modification. Useful as a default cast or when you need to maintain the original type.</p> Source code in <code>superconf/casts.py</code> <pre><code>class AsIdentity(AbstractCast):\n    \"\"\"Return the input value unchanged.\n\n    A no-operation cast that simply returns the input value without modification.\n    Useful as a default cast or when you need to maintain the original type.\n    \"\"\"\n\n    def __call__(self, value):\n        return value\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsInt","title":"<code>AsInt</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value to an integer.</p> <p>Attempts to convert the input value to an integer using Python's built-in int() function.</p> <p>Raises:</p> Type Description <code>InvalidCastConfiguration</code> <p>If the value cannot be converted to an integer.</p> Source code in <code>superconf/casts.py</code> <pre><code>class AsInt(AbstractCast):\n    \"\"\"Cast a value to an integer.\n\n    Attempts to convert the input value to an integer using Python's built-in int() function.\n\n    Raises:\n        InvalidCastConfiguration: If the value cannot be converted to an integer.\n    \"\"\"\n\n    def __call__(self, value):\n        try:\n            return int(value)\n        except (ValueError, TypeError) as err:\n            # TOFIX: Raise or report unset ?\n            # return NOT_SET\n            raise InvalidCastConfiguration(\n                f\"Error casting value {value} to int\"\n            ) from err\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsList","title":"<code>AsList</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value to a list with support for delimited strings.</p> <p>Converts various input types to a list: - Empty values become empty lists - Strings are split by delimiter, with support for quoted elements - Sequences are converted directly to lists</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The character used to split strings. Defaults to ','.</p> <code>','</code> <code>quotes</code> <code>str</code> <p>String containing valid quote characters. Defaults to '\"''.</p> <code>'\"\\''</code> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cast = AsList()\n&gt;&gt;&gt; cast('a,b,c')  # Returns: ['a', 'b', 'c']\n&gt;&gt;&gt; cast('\"a,b\",c')  # Returns: ['a,b', 'c']\n&gt;&gt;&gt; cast(['a', 'b'])  # Returns: ['a', 'b']\n</code></pre> Source code in <code>superconf/casts.py</code> <pre><code>class AsList(AbstractCast):\n    \"\"\"Cast a value to a list with support for delimited strings.\n\n    Converts various input types to a list:\n    - Empty values become empty lists\n    - Strings are split by delimiter, with support for quoted elements\n    - Sequences are converted directly to lists\n\n    Args:\n        delimiter (str, optional): The character used to split strings. Defaults to ','.\n        quotes (str, optional): String containing valid quote characters. Defaults to '\"\\''.\n\n    Examples:\n        &gt;&gt;&gt; cast = AsList()\n        &gt;&gt;&gt; cast('a,b,c')  # Returns: ['a', 'b', 'c']\n        &gt;&gt;&gt; cast('\"a,b\",c')  # Returns: ['a,b', 'c']\n        &gt;&gt;&gt; cast(['a', 'b'])  # Returns: ['a', 'b']\n    \"\"\"\n\n    def __init__(self, delimiter=\",\", quotes=\"\\\"'\"):\n        self.delimiter = delimiter\n        self.quotes = quotes\n\n    def cast(self, sequence):\n        \"Cast to correct type\"\n        return list(sequence)\n\n    def __call__(self, value):\n        return self._parse(value)\n\n    def _parse(self, value):\n\n        if not value:\n            # print (\"PARSE AS EMPTY\", value)\n            return self.cast([])\n\n        if isinstance(value, str):\n            # print (\"PARSE AS STRING\", value)\n            return self._parse_string(value)\n\n        if isinstance(value, Sequence):\n            # print (\"PARSE AS LIST\", value)\n            return self.cast(value)\n        if isinstance(value, Mapping):\n            assert False, f\"TOFIX: Unsupported type dict, {value}\"\n\n        assert False\n\n    def _parse_string(self, string):\n        elements = []\n        element = []\n        quote = \"\"\n        for char in string:\n            # open quote\n            if char in self.quotes and not quote:\n                quote = char\n                element.append(char)\n                continue\n\n            # close quote\n            if char in self.quotes and char == quote:\n                quote = \"\"\n                element.append(char)\n                continue\n\n            if quote:\n                element.append(char)\n                continue\n\n            if char == self.delimiter:\n                elements.append(\"\".join(element))\n                element = []\n                continue\n\n            element.append(char)\n\n        # remaining element\n        if element:\n            elements.append(\"\".join(element))\n\n        return self.cast(e.strip() for e in elements)\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsList.cast","title":"<code>cast(sequence)</code>","text":"<p>Cast to correct type</p> Source code in <code>superconf/casts.py</code> <pre><code>def cast(self, sequence):\n    \"Cast to correct type\"\n    return list(sequence)\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsOption","title":"<code>AsOption</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value by selecting from predefined options.</p> <p>Maps input values to predefined options using a dictionary mapping. Optionally supports a default option when the input doesn't match any defined option.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <code>dict</code> <p>A dictionary mapping input values to their corresponding options.</p> required <code>default_option</code> <code>any</code> <p>The key to use when the input value isn't found. If FAIL (default), raises an exception for invalid inputs.</p> <code>FAIL</code> <p>Raises:</p> Type Description <code>InvalidCastConfiguration</code> <p>If the input value is not in options and no valid default_option is provided.</p> Example <p>cast = AsOption({'dev': ['debug'], 'prod': ['optimize']}, 'dev') cast('prod')  # Returns: ['optimize'] cast('invalid')  # Returns: ['debug'] (default option)</p> Source code in <code>superconf/casts.py</code> <pre><code>class AsOption(AbstractCast):\n    \"\"\"Cast a value by selecting from predefined options.\n\n    Maps input values to predefined options using a dictionary mapping.\n    Optionally supports a default option when the input doesn't match any defined option.\n\n    Args:\n        options (dict): A dictionary mapping input values to their corresponding options.\n        default_option (any, optional): The key to use when the input value isn't found.\n            If FAIL (default), raises an exception for invalid inputs.\n\n    Raises:\n        InvalidCastConfiguration: If the input value is not in options and no valid\n            default_option is provided.\n\n    Example:\n        &gt;&gt;&gt; cast = AsOption({'dev': ['debug'], 'prod': ['optimize']}, 'dev')\n        &gt;&gt;&gt; cast('prod')  # Returns: ['optimize']\n        &gt;&gt;&gt; cast('invalid')  # Returns: ['debug'] (default option)\n    \"\"\"\n\n    def __init__(self, options, default_option=FAIL):\n        self.options = options\n        self.default_option = default_option\n\n    def __call__(self, value):\n        try:\n            return self.options[value]\n        except KeyError as err:\n\n            # Raise error if no default\n            default_option = self.default_option\n            if default_option is FAIL:\n                raise InvalidCastConfiguration(f\"Invalid option {value}\") from err\n\n            # Look for default\n            if not default_option in self.options:\n                raise InvalidCastConfiguration(\n                    f\"Invalid default option {value}: does not exists: {default_option}\"\n                ) from err\n\n            # if isinstance(default, str):\n            return self.options[default_option]\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsString","title":"<code>AsString</code>","text":"<p>               Bases: <code>AbstractCast</code></p> <p>Cast a value to a string.</p> <p>Attempts to convert the input value to a string using Python's built-in str() function.</p> <p>Raises:</p> Type Description <code>InvalidCastConfiguration</code> <p>If the value cannot be converted to a string.</p> Source code in <code>superconf/casts.py</code> <pre><code>class AsString(AbstractCast):\n    \"\"\"Cast a value to a string.\n\n    Attempts to convert the input value to a string using Python's built-in str() function.\n\n    Raises:\n        InvalidCastConfiguration: If the value cannot be converted to a string.\n    \"\"\"\n\n    def __call__(self, value):\n        if isinstance(value, str):\n            return str(value)\n        if not value:\n            return \"\"\n        return str(value)\n</code></pre>"},{"location":"reference/cast/#superconf.casts.AsTuple","title":"<code>AsTuple</code>","text":"<p>               Bases: <code>AsList</code></p> <p>Cast a value to a tuple.</p> <p>Inherits from AsList but converts the final result to a tuple instead of a list. Accepts the same arguments and follows the same parsing rules as AsList.</p> <p>Parameters:</p> Name Type Description Default <code>delimiter</code> <code>str</code> <p>The character used to split strings. Defaults to ','.</p> <code>','</code> <code>quotes</code> <code>str</code> <p>String containing valid quote characters. Defaults to '\"''.</p> <code>'\"\\''</code> Source code in <code>superconf/casts.py</code> <pre><code>class AsTuple(AsList):\n    \"\"\"Cast a value to a tuple.\n\n    Inherits from AsList but converts the final result to a tuple instead of a list.\n    Accepts the same arguments and follows the same parsing rules as AsList.\n\n    Args:\n        delimiter (str, optional): The character used to split strings. Defaults to ','.\n        quotes (str, optional): String containing valid quote characters. Defaults to '\"\\''.\n    \"\"\"\n\n    def cast(self, sequence):\n        return tuple(sequence)\n</code></pre>"},{"location":"reference/configuration/","title":"Module API - Configuration","text":""},{"location":"reference/configuration/#superconf.configuration","title":"<code>superconf.configuration</code>","text":"<p>Main configuratio  class</p>"},{"location":"reference/configuration/#superconf.configuration.Configuration","title":"<code>Configuration</code>","text":"<p>               Bases: <code>ConfigurationDict</code></p> <p>Main configuration class supporting declarative field definitions.</p> <p>This class allows fields to be declared as class attributes and provides a clean interface for defining configuration schemas.</p> Source code in <code>superconf/configuration.py</code> <pre><code>class Configuration(ConfigurationDict):\n    \"\"\"Main configuration class supporting declarative field definitions.\n\n    This class allows fields to be declared as class attributes and provides\n    a clean interface for defining configuration schemas.\n    \"\"\"\n\n    meta__extra_fields = False\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.ConfigurationDict","title":"<code>ConfigurationDict</code>","text":"<p>               Bases: <code>Store</code></p> <p>Dictionary-based configuration container.</p> <p>Provides a dictionary interface to configuration values and supports dynamic field creation based on input values.</p> Source code in <code>superconf/configuration.py</code> <pre><code>class ConfigurationDict(Store, metaclass=DeclarativeValuesMetaclass):\n    \"\"\"Dictionary-based configuration container.\n\n    Provides a dictionary interface to configuration values and supports\n    dynamic field creation based on input values.\n    \"\"\"\n\n    # meta__custom_field = \"My VALUUUUuuueeeee\"\n    meta__loaders = [Environment()]\n    meta__cache = True  # Yes by default ...\n    meta__extra_fields = True\n    meta__strict_cast = False\n\n    # Optional fields\n    # meta__default = NOT_SET # dict()\n    # meta__extra_fields = NOT_SET # dict()\n\n    def set_dyn_children(self, value):\n        \"\"\"Set up dynamic children based on input value.\n\n        Creates fields dynamically for dictionary values that don't have\n        corresponding declared fields.\n\n        Args:\n            value: Dictionary of configuration values\n        \"\"\"\n\n        # Create children method\n        # Check for predefined Fields\n        # If additional_items == True\n        # Check value\n        # For each keys, check if a type exists, or field\n        # Add to _extra_fields\n\n        # For each children,\n        # If class of Configuration, create child\n        # If field, do noting\n\n        # declared_fields = self.declared_fields\n        children_class = self._children_class\n\n        # Add extra fields\n        child_values = value or dict()\n\n        if isinstance(child_values, dict):\n\n            # Look for new keys in value\n            assert isinstance(\n                child_values, dict\n            ), f\"Got {self}: {type(child_values)}: {child_values}\"\n\n            for key, _ in child_values.items():\n\n                # Get best children_class\n                field = None\n                child_class = NOT_SET\n\n                # Check if key have an existing field\n                if key in self.declared_fields:\n                    field = self.declared_fields[key]\n                    # child_class = field.children_class\n                    child_class = getattr(field, \"children_class\", NOT_SET)\n\n                # Prevent unexpected childrens ...\n                if not field and self._extra_fields_enabled is False:\n                    msg = f\"Undeclared key '{key}' for {self}, or enable extra_fields=True\"\n                    raise exceptions.UnknownExtraField(msg)\n\n                if child_class is NOT_SET:\n                    # Get children class form container\n                    child_class = children_class\n\n                if not field:\n                    xtra_kwargs = {}\n                    if not child_class:\n                        # No children_class, then it's just a field\n                        child_cls = Field\n                    else:\n                        child_cls = FieldConf\n                        xtra_kwargs = dict(children_class=child_class)\n\n                    logger.debug(\n                        \"Register dynamic field %s.%s: %s\", self, key, child_cls\n                    )\n\n                    # Create dynamic field\n                    field = child_cls(\n                        key=key,\n                        **xtra_kwargs,\n                    )\n                    self._extra_fields[key] = field\n\n    def __iter__(self):\n        yield from self.declared_fields.items()\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.ConfigurationDict.set_dyn_children","title":"<code>set_dyn_children(value)</code>","text":"<p>Set up dynamic children based on input value.</p> <p>Creates fields dynamically for dictionary values that don't have corresponding declared fields.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>Dictionary of configuration values</p> required Source code in <code>superconf/configuration.py</code> <pre><code>def set_dyn_children(self, value):\n    \"\"\"Set up dynamic children based on input value.\n\n    Creates fields dynamically for dictionary values that don't have\n    corresponding declared fields.\n\n    Args:\n        value: Dictionary of configuration values\n    \"\"\"\n\n    # Create children method\n    # Check for predefined Fields\n    # If additional_items == True\n    # Check value\n    # For each keys, check if a type exists, or field\n    # Add to _extra_fields\n\n    # For each children,\n    # If class of Configuration, create child\n    # If field, do noting\n\n    # declared_fields = self.declared_fields\n    children_class = self._children_class\n\n    # Add extra fields\n    child_values = value or dict()\n\n    if isinstance(child_values, dict):\n\n        # Look for new keys in value\n        assert isinstance(\n            child_values, dict\n        ), f\"Got {self}: {type(child_values)}: {child_values}\"\n\n        for key, _ in child_values.items():\n\n            # Get best children_class\n            field = None\n            child_class = NOT_SET\n\n            # Check if key have an existing field\n            if key in self.declared_fields:\n                field = self.declared_fields[key]\n                # child_class = field.children_class\n                child_class = getattr(field, \"children_class\", NOT_SET)\n\n            # Prevent unexpected childrens ...\n            if not field and self._extra_fields_enabled is False:\n                msg = f\"Undeclared key '{key}' for {self}, or enable extra_fields=True\"\n                raise exceptions.UnknownExtraField(msg)\n\n            if child_class is NOT_SET:\n                # Get children class form container\n                child_class = children_class\n\n            if not field:\n                xtra_kwargs = {}\n                if not child_class:\n                    # No children_class, then it's just a field\n                    child_cls = Field\n                else:\n                    child_cls = FieldConf\n                    xtra_kwargs = dict(children_class=child_class)\n\n                logger.debug(\n                    \"Register dynamic field %s.%s: %s\", self, key, child_cls\n                )\n\n                # Create dynamic field\n                field = child_cls(\n                    key=key,\n                    **xtra_kwargs,\n                )\n                self._extra_fields[key] = field\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.ConfigurationList","title":"<code>ConfigurationList</code>","text":"<p>               Bases: <code>Store</code></p> <p>List-based configuration container.</p> <p>Provides a list interface to configuration values and supports dynamic field creation for list elements.</p> Source code in <code>superconf/configuration.py</code> <pre><code>class ConfigurationList(Store):\n    \"\"\"List-based configuration container.\n\n    Provides a list interface to configuration values and supports\n    dynamic field creation for list elements.\n    \"\"\"\n\n    # _declared_values = {}\n    meta__loaders = [Environment()]\n    meta__cache = True  # Yes by default ...\n    meta__extra_fields = True\n    meta__strict_cast = False\n\n    def set_dyn_children(self, value):\n        \"\"\"Set up dynamic children based on input value.\n\n        Creates fields dynamically for list elements.\n\n        Args:\n            value: List of configuration values\n        \"\"\"\n\n        children_class = self._children_class\n        child_values = value or []\n\n        if isinstance(child_values, list):\n\n            # Look for new keys in value\n            assert isinstance(\n                child_values, list\n            ), f\"Got {self}: {type(child_values)}: {child_values}\"\n\n            for key, _ in enumerate(child_values):\n\n                # Get best children_class\n                # field = None\n                child_class = children_class\n\n                xtra_kwargs = {}\n                if not child_class:\n                    # No children_class, then it's just a field\n                    child_cls = Field\n                else:\n                    child_cls = FieldConf\n                    xtra_kwargs = dict(children_class=child_class)\n\n                # Create dynamic field\n                field = child_cls(\n                    key=key,\n                    **xtra_kwargs,\n                )\n                self._extra_fields[key] = field\n\n    def get_values(self, lvl=-1, **kwargs):\n        \"\"\"Get all configuration values as a list.\n\n        Args:\n            lvl: Recursion level for nested configurations\n            **kwargs: Additional arguments passed to parent method\n\n        Returns:\n            List of configuration values\n        \"\"\"\n        out = super().get_values(lvl=lvl, **kwargs)\n\n        if isinstance(out, Mapping):\n            out = list(out.values())\n        return out\n\n    def __getitem__(self, value):\n        value = int(value)\n\n        return super().__getitem__(value)\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.ConfigurationList.get_values","title":"<code>get_values(lvl=-1, **kwargs)</code>","text":"<p>Get all configuration values as a list.</p> <p>Parameters:</p> Name Type Description Default <code>lvl</code> <p>Recursion level for nested configurations</p> <code>-1</code> <code>**kwargs</code> <p>Additional arguments passed to parent method</p> <code>{}</code> <p>Returns:</p> Type Description <p>List of configuration values</p> Source code in <code>superconf/configuration.py</code> <pre><code>def get_values(self, lvl=-1, **kwargs):\n    \"\"\"Get all configuration values as a list.\n\n    Args:\n        lvl: Recursion level for nested configurations\n        **kwargs: Additional arguments passed to parent method\n\n    Returns:\n        List of configuration values\n    \"\"\"\n    out = super().get_values(lvl=lvl, **kwargs)\n\n    if isinstance(out, Mapping):\n        out = list(out.values())\n    return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.ConfigurationList.set_dyn_children","title":"<code>set_dyn_children(value)</code>","text":"<p>Set up dynamic children based on input value.</p> <p>Creates fields dynamically for list elements.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <p>List of configuration values</p> required Source code in <code>superconf/configuration.py</code> <pre><code>def set_dyn_children(self, value):\n    \"\"\"Set up dynamic children based on input value.\n\n    Creates fields dynamically for list elements.\n\n    Args:\n        value: List of configuration values\n    \"\"\"\n\n    children_class = self._children_class\n    child_values = value or []\n\n    if isinstance(child_values, list):\n\n        # Look for new keys in value\n        assert isinstance(\n            child_values, list\n        ), f\"Got {self}: {type(child_values)}: {child_values}\"\n\n        for key, _ in enumerate(child_values):\n\n            # Get best children_class\n            # field = None\n            child_class = children_class\n\n            xtra_kwargs = {}\n            if not child_class:\n                # No children_class, then it's just a field\n                child_cls = Field\n            else:\n                child_cls = FieldConf\n                xtra_kwargs = dict(children_class=child_class)\n\n            # Create dynamic field\n            field = child_cls(\n                key=key,\n                **xtra_kwargs,\n            )\n            self._extra_fields[key] = field\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.DeclarativeValuesMetaclass","title":"<code>DeclarativeValuesMetaclass</code>","text":"<p>               Bases: <code>type</code></p> <p>Collect Value objects declared on the base classes</p> Source code in <code>superconf/configuration.py</code> <pre><code>class DeclarativeValuesMetaclass(type):\n    \"\"\"\n    Collect Value objects declared on the base classes\n    \"\"\"\n\n    def __new__(mcs, class_name, bases, attrs):\n        # Collect values from current class and all bases.\n        values = OrderedDict()\n\n        # Walk through the MRO and add values from base class.\n        for base in reversed(bases):\n            if hasattr(base, \"_declared_values\"):\n                values.update(base._declared_values)\n\n        for key, value in attrs.items():\n            if isinstance(value, Field):\n                if value.key and key != value.key:\n                    raise AttributeError(\n                        \"Don't explicitly set keys when declaring values\"\n                    )\n                value.key = key\n                values.update({key: value})\n\n        attrs[\"_declared_values\"] = values\n\n        return super(DeclarativeValuesMetaclass, mcs).__new__(\n            mcs, class_name, bases, attrs\n        )\n\n    @classmethod\n    def __prepare__(mcs, name, bases, **kwds):\n        # Remember the order that values are defined.\n        return OrderedDict()\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node","title":"<code>Node</code>","text":"<p>Base class for configuration objects providing core configuration query functionality.</p> <p>This class implements the basic configuration query mechanisms used by all configuration classes. It supports querying configuration values from various sources including instance attributes, class Meta attributes, and parent configurations.</p> Source code in <code>superconf/configuration.py</code> <pre><code>class Node:\n    \"\"\"Base class for configuration objects providing core configuration query functionality.\n\n    This class implements the basic configuration query mechanisms used by all configuration\n    classes. It supports querying configuration values from various sources including\n    instance attributes, class Meta attributes, and parent configurations.\n    \"\"\"\n\n    class Meta:\n        \"\"\"Class to store class-level configuration overrides.\"\"\"\n\n    def __init__(self, key=None, value=NOT_SET, parent=None):\n        \"\"\"Initialize a configuration base instance.\n\n        Args:\n            key: The configuration key name\n            value: The configuration value (defaults to NOT_SET)\n            parent: Parent configuration object if this is a child config\n        \"\"\"\n        self.key = key\n        self._parent = parent\n        self._value = value\n        self._cache = True  # TOFIX\n\n    # Instance config management\n    # ----------------------------\n\n    def query_inst_cfg(self, *args, cast=None, report=False, **kwargs):\n        \"\"\"Query instance configuration with optional type casting.\n\n        Args:\n            *args: Variable length argument list passed to _query_inst_cfg\n            cast: Optional type to cast the result to\n            **kwargs: Arbitrary keyword arguments passed to _query_inst_cfg\n\n        Returns:\n            The configuration value, optionally cast to the specified type\n        \"\"\"\n        out, _report = self._query_inst_cfg(*args, **kwargs)\n        logger.debug(\"Node config query for %s.%s=%s\", self, args[0], out)\n\n        if isinstance(out, (dict, list)):\n            out = copy.copy(out)\n\n        if cast is not None:\n            # Try to cast if asked\n            if not out:\n                out = cast()\n            assert isinstance(\n                out, cast\n            ), f\"Wrong type for config {self}, expected {cast}, got: {type(out)} {out}\"\n        if report:\n            return out, _report\n        return out\n\n    # @classmethod\n    # def _query_cls_cfg(cls, *args, **kwargs):\n    #     \"Temporary class method\"\n    #     out = cls._query_inst_cfg(cls, *args, **kwargs)\n    #     if isinstance(out, (dict, list)):\n    #         out = copy.copy(out)\n    #     return out\n\n    def _query_inst_cfg(self, name, override=None, default=UNSET_ARG):\n        \"\"\"Internal method to query instance configuration from various sources.\n\n        Searches for configuration values in the following order:\n        1. Dictionary override if provided\n        2. Instance attribute with _name prefix\n        3. Class Meta attribute\n        4. Instance attribute with meta__ prefix\n        5. Default value if provided\n\n        Args:\n            name: Configuration setting name to query\n            override: Optional dictionary of override values\n            parents: Whether to check parent configurations\n            default: Default value if setting is not found\n\n        Returns:\n            Tuple of (value, query_sources) where query_sources is a list of searched locations\n\n        Raises:\n            UnknownSetting: If the setting is not found and no default is provided\n        \"\"\"\n        query_from = []\n\n        # Fetch from dict override, if provided\n        if isinstance(override, dict):\n            val = override.get(name, NOT_SET)\n            if val is not NOT_SET:\n                query_from.append(f\"dict_override:{name}\")\n                return val, query_from\n\n        # Fetch from self._NAME\n        # Good for initial setup, if write mode is required\n        val = getattr(self, f\"_{name}\", NOT_SET)\n        if val is not NOT_SET:\n            query_from.append(f\"self_attr:_{name}\")\n            return val, query_from\n\n        # Python class params\n        # Good for class overrides\n        cls = self\n        if hasattr(cls, \"Meta\"):\n            val = getattr(cls.Meta, name, NOT_SET)\n            if val is not NOT_SET:\n                query_from.append(f\"self_meta:Meta.{name}\")\n                # print (\"SELF CLASS Meta retrieval for: {cls}\" , name, val)\n                return val, query_from\n\n        # Fetch from self.meta__NAME\n        # Python class inherited params (good for defaults)\n        val = getattr(self, f\"meta__{name}\", NOT_SET)\n        if val is not NOT_SET:\n            query_from.append(f\"self_attr:meta__{name}\")\n            return val, query_from\n\n        if default is not UNSET_ARG:\n            query_from.append(\"default_arg\")\n            return default, query_from\n\n        msg = (\n            f\"Setting '{name}' has not been declared before being used\"\n            f\" in '{repr(self)}', tried to query: {query_from}\"\n        )\n        raise exceptions.UnknownSetting(msg)\n\n    def query_cfg(self, name, include_self=True, report=False, **kwargs):\n        \"Temporary wrapper\"\n        return self.query_parent_cfg(name, include_self=True, report=report, **kwargs)\n\n    # pylint: disable=too-many-arguments, too-many-positional-arguments\n    def query_parent_cfg(\n        self,\n        name,\n        as_subkey=False,\n        cast=None,\n        default=UNSET_ARG,\n        include_self=False,\n        report=False,\n    ):\n        \"\"\"Query configuration from parent object.\n\n        Args:\n            name: Configuration setting name to query\n            as_subkey: If True and parent value is dict, get self.key from it\n            cast: Optional type to cast the result to\n            default: Default value if setting is not found\n\n        Returns:\n            The configuration value from the parent, optionally cast to specified type\n\n        Raises:\n            UnknownSetting: If no parent exists and no default is provided\n        \"\"\"\n\n        # Fast exit or raise exception\n        if not self._parent and include_self is False:\n            if default is not UNSET_ARG:\n                if report:\n                    return default, \"No parents, return default value\"\n                return default\n            msg = (\n                f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n            )\n            raise exceptions.UnknownSetting(msg)\n\n        # Check parents\n        _report = []\n        parents = self.get_hierarchy()\n        if include_self is False:\n            parents = parents[1:]\n        out = NOT_SET\n        for parent in parents:\n            _report.append(f\"Check '{name}' in parent {parent}\")\n\n            if report:\n                out, _report2 = parent.query_inst_cfg(\n                    name, default=NOT_SET, report=True\n                )\n                _report.append(_report2)\n            else:\n                out = parent.query_inst_cfg(name, default=NOT_SET)\n\n            # If a value is found, then scan it\n            if out is not NOT_SET:\n                _report.append(f\"Found '{name}' in parent {parent}= {out}\")\n\n                # Ckeck subkey\n                if as_subkey is True:\n                    if isinstance(out, dict):\n                        out = out.get(self.key, NOT_SET)\n                    elif isinstance(out, list):\n                        assert isinstance(self.key, int), f\"Got: {self.key}\"\n                        out = out[self.key]\n                    else:\n                        out = NOT_SET\n                _report.append(f\"Found2 '{name}' in parent {parent}= {out}\")\n\n            # Don't ask more parents if value is found\n            if out is not NOT_SET:\n                break\n\n        if out is NOT_SET:\n            _report.append(f\"NotFound '{name}' in parent: {parent}\")\n\n        if cast is not None:\n            # Try to cast if asked\n            if not out:\n                out = cast()\n            assert isinstance(\n                out, cast\n            ), f\"Wrong type for config {name}, expected {cast}, got: {type(out)} {out}\"\n\n        if out is NOT_SET and default is UNSET_ARG:\n            msg = (\n                f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n            )\n            raise exceptions.UnknownSetting(msg)\n\n        if report:\n            return out, _report\n        return out\n\n    def get_hierarchy(self):\n        \"Return a list of parents NEW VERSION\"\n        out = [self]\n\n        target = self\n        while target._parent is not None and target._parent not in out:\n            target = target._parent\n            out.append(target)\n\n        return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node.Meta","title":"<code>Meta</code>","text":"<p>Class to store class-level configuration overrides.</p> Source code in <code>superconf/configuration.py</code> <pre><code>class Meta:\n    \"\"\"Class to store class-level configuration overrides.\"\"\"\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node.__init__","title":"<code>__init__(key=None, value=NOT_SET, parent=None)</code>","text":"<p>Initialize a configuration base instance.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>The configuration key name</p> <code>None</code> <code>value</code> <p>The configuration value (defaults to NOT_SET)</p> <code>NOT_SET</code> <code>parent</code> <p>Parent configuration object if this is a child config</p> <code>None</code> Source code in <code>superconf/configuration.py</code> <pre><code>def __init__(self, key=None, value=NOT_SET, parent=None):\n    \"\"\"Initialize a configuration base instance.\n\n    Args:\n        key: The configuration key name\n        value: The configuration value (defaults to NOT_SET)\n        parent: Parent configuration object if this is a child config\n    \"\"\"\n    self.key = key\n    self._parent = parent\n    self._value = value\n    self._cache = True  # TOFIX\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node.get_hierarchy","title":"<code>get_hierarchy()</code>","text":"<p>Return a list of parents NEW VERSION</p> Source code in <code>superconf/configuration.py</code> <pre><code>def get_hierarchy(self):\n    \"Return a list of parents NEW VERSION\"\n    out = [self]\n\n    target = self\n    while target._parent is not None and target._parent not in out:\n        target = target._parent\n        out.append(target)\n\n    return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node.query_cfg","title":"<code>query_cfg(name, include_self=True, report=False, **kwargs)</code>","text":"<p>Temporary wrapper</p> Source code in <code>superconf/configuration.py</code> <pre><code>def query_cfg(self, name, include_self=True, report=False, **kwargs):\n    \"Temporary wrapper\"\n    return self.query_parent_cfg(name, include_self=True, report=report, **kwargs)\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node.query_inst_cfg","title":"<code>query_inst_cfg(*args, cast=None, report=False, **kwargs)</code>","text":"<p>Query instance configuration with optional type casting.</p> <p>Parameters:</p> Name Type Description Default <code>*args</code> <p>Variable length argument list passed to _query_inst_cfg</p> <code>()</code> <code>cast</code> <p>Optional type to cast the result to</p> <code>None</code> <code>**kwargs</code> <p>Arbitrary keyword arguments passed to _query_inst_cfg</p> <code>{}</code> <p>Returns:</p> Type Description <p>The configuration value, optionally cast to the specified type</p> Source code in <code>superconf/configuration.py</code> <pre><code>def query_inst_cfg(self, *args, cast=None, report=False, **kwargs):\n    \"\"\"Query instance configuration with optional type casting.\n\n    Args:\n        *args: Variable length argument list passed to _query_inst_cfg\n        cast: Optional type to cast the result to\n        **kwargs: Arbitrary keyword arguments passed to _query_inst_cfg\n\n    Returns:\n        The configuration value, optionally cast to the specified type\n    \"\"\"\n    out, _report = self._query_inst_cfg(*args, **kwargs)\n    logger.debug(\"Node config query for %s.%s=%s\", self, args[0], out)\n\n    if isinstance(out, (dict, list)):\n        out = copy.copy(out)\n\n    if cast is not None:\n        # Try to cast if asked\n        if not out:\n            out = cast()\n        assert isinstance(\n            out, cast\n        ), f\"Wrong type for config {self}, expected {cast}, got: {type(out)} {out}\"\n    if report:\n        return out, _report\n    return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Node.query_parent_cfg","title":"<code>query_parent_cfg(name, as_subkey=False, cast=None, default=UNSET_ARG, include_self=False, report=False)</code>","text":"<p>Query configuration from parent object.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <p>Configuration setting name to query</p> required <code>as_subkey</code> <p>If True and parent value is dict, get self.key from it</p> <code>False</code> <code>cast</code> <p>Optional type to cast the result to</p> <code>None</code> <code>default</code> <p>Default value if setting is not found</p> <code>UNSET_ARG</code> <p>Returns:</p> Type Description <p>The configuration value from the parent, optionally cast to specified type</p> <p>Raises:</p> Type Description <code>UnknownSetting</code> <p>If no parent exists and no default is provided</p> Source code in <code>superconf/configuration.py</code> <pre><code>def query_parent_cfg(\n    self,\n    name,\n    as_subkey=False,\n    cast=None,\n    default=UNSET_ARG,\n    include_self=False,\n    report=False,\n):\n    \"\"\"Query configuration from parent object.\n\n    Args:\n        name: Configuration setting name to query\n        as_subkey: If True and parent value is dict, get self.key from it\n        cast: Optional type to cast the result to\n        default: Default value if setting is not found\n\n    Returns:\n        The configuration value from the parent, optionally cast to specified type\n\n    Raises:\n        UnknownSetting: If no parent exists and no default is provided\n    \"\"\"\n\n    # Fast exit or raise exception\n    if not self._parent and include_self is False:\n        if default is not UNSET_ARG:\n            if report:\n                return default, \"No parents, return default value\"\n            return default\n        msg = (\n            f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n        )\n        raise exceptions.UnknownSetting(msg)\n\n    # Check parents\n    _report = []\n    parents = self.get_hierarchy()\n    if include_self is False:\n        parents = parents[1:]\n    out = NOT_SET\n    for parent in parents:\n        _report.append(f\"Check '{name}' in parent {parent}\")\n\n        if report:\n            out, _report2 = parent.query_inst_cfg(\n                name, default=NOT_SET, report=True\n            )\n            _report.append(_report2)\n        else:\n            out = parent.query_inst_cfg(name, default=NOT_SET)\n\n        # If a value is found, then scan it\n        if out is not NOT_SET:\n            _report.append(f\"Found '{name}' in parent {parent}= {out}\")\n\n            # Ckeck subkey\n            if as_subkey is True:\n                if isinstance(out, dict):\n                    out = out.get(self.key, NOT_SET)\n                elif isinstance(out, list):\n                    assert isinstance(self.key, int), f\"Got: {self.key}\"\n                    out = out[self.key]\n                else:\n                    out = NOT_SET\n            _report.append(f\"Found2 '{name}' in parent {parent}= {out}\")\n\n        # Don't ask more parents if value is found\n        if out is not NOT_SET:\n            break\n\n    if out is NOT_SET:\n        _report.append(f\"NotFound '{name}' in parent: {parent}\")\n\n    if cast is not None:\n        # Try to cast if asked\n        if not out:\n            out = cast()\n        assert isinstance(\n            out, cast\n        ), f\"Wrong type for config {name}, expected {cast}, got: {type(out)} {out}\"\n\n    if out is NOT_SET and default is UNSET_ARG:\n        msg = (\n            f\"Setting '{name}' has not been declared in hierarchy of '{repr(self)}'\"\n        )\n        raise exceptions.UnknownSetting(msg)\n\n    if report:\n        return out, _report\n    return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store","title":"<code>Store</code>","text":"<p>               Bases: <code>Node</code></p> <p>Base configuration container class that manages configuration fields and values.</p> <p>This class extends Node to provide field management, value caching, and dynamic child configuration creation capabilities.</p> Source code in <code>superconf/configuration.py</code> <pre><code>class Store(Node):\n    \"\"\"Base configuration container class that manages configuration fields and values.\n\n    This class extends Node to provide field management, value caching,\n    and dynamic child configuration creation capabilities.\n    \"\"\"\n\n    _declared_values = {}\n\n    def __init__(self, *, key=None, value=NOT_SET, parent=None, meta=None, **kwargs):\n        \"\"\"Initialize a configuration container.\n\n        Args:\n            key: Configuration key name\n            value: Initial configuration value\n            parent: Parent configuration object\n            meta: Optional meta configuration\n            **kwargs: Additional configuration options\n        \"\"\"\n\n        # super(Store, self).__init__(key=key, value=value, parent=parent)\n        super().__init__(key=key, value=value, parent=parent)\n\n        # As this can be updated during runtime ...\n        # self._declared_values = self._declared_values\n        # self._declared_values = dict()\n        self._cached_values = {}\n\n        kwargs.update(\n            dict(\n                key=key,\n                # loaders=loaders,\n                # cache=cache,\n                parent=parent,\n            )\n        )\n\n        # self._loaders = NOT_SET\n        self._loaders = self.query_inst_cfg(\"loaders\", override=kwargs)\n        # self._cache = self.query_inst_cfg(\"cache\", override=kwargs)\n        self._cache = True  # TOFIX\n\n        self._extra_fields_enabled = self.query_inst_cfg(\n            \"extra_fields\",\n            override=kwargs,\n            default=True,  # TOFIX, should be set to false by default\n        )\n        self._extra_fields = {}\n        self._children_class = self.query_inst_cfg(\n            \"children_class\", override=kwargs, default=NOT_SET\n        )\n\n        self._cast = self.query_inst_cfg(\"cast\", override=kwargs, default=None)\n        self._strict_cast = self.query_inst_cfg(\"strict_cast\", override=kwargs)\n\n        self._default = self.query_inst_cfg(\"default\", override=kwargs, default=NOT_SET)\n        if self._default is NOT_SET:\n            self._default = self.query_parent_cfg(\n                \"default\", as_subkey=True, default=NOT_SET\n            )\n\n        # print (\"\\n\\n===== CREATE NEW CONFIG\", self.key, self, value)\n        child_values = self._default if self._value is NOT_SET else self._value\n        self.set_values(child_values, lookup=True)\n\n    def set_dyn_children(self, value):\n        \"Placeholder\"\n\n    # Generic API\n    # ----------------------------\n\n    # Field compat API\n    @property\n    def default(self):\n        \"Temporary property to access to self._default\"\n        return self._default\n\n    @property\n    def cast(self):\n        \"Temporary property to access to self._default\"\n        return self._cast\n\n    # Field compatibility layer !\n    # This basically respect default python behavior , when this is a children...\n    def __get__(self, conf_instance, owner):\n        # if conf_instance:\n        #     return conf_instance.get_field_value(field=self)\n        return self\n\n    def __getitem__(self, value):\n        return self.declared_fields[value].__get__(self, self.__class__)\n\n    def __len__(self):\n        return len(self.declared_fields)\n\n    # def __repr__(self):\n    #     return \"{}(loaders=[{}])\".format(\n    #         self.__class__.__name__,\n    #         \", \".join([str(loader) for loader in self._loaders]),\n    #     )\n\n    # def __str__(self):\n    #     values = []\n    #     for _, v in self:\n    #         if v.default is NOT_SET and not v.help:\n    #             help = \"No default value provided\"\n    #         elif not v.help:\n    #             help = \"Default value is {}.\".format(repr(v.default))\n    #         else:\n    #             help = v.help\n    #         try:\n    #             values.append(\n    #                 \"{}={} - {}\".format(v.key, repr(getattr(self, v.key)), help)\n    #             )\n    #         except UnknownConfiguration:\n    #             values.append(\"{}=NOT_SET - {}\".format(v.key, help))\n    #     return \"\\n\".join(values)\n\n    # Value management\n    # ----------------------------\n\n    def get_value(self, key, lvl=-1, **kwargs):\n        \"\"\"Get configuration value for a given key.\n\n        Args:\n            key: Configuration key to retrieve\n            lvl: Recursion level for nested configurations\n            **kwargs: Additional arguments passed to get_field_value\n\n        Returns:\n            Configuration value for the specified key\n        \"\"\"\n        assert isinstance(key, str)\n        return self.get_field_value(key, **kwargs)\n\n    def reset(self):\n        \"\"\"Reset all loaders and clear cached values.\n\n        This should be called when configuration values need to be reloaded.\n        \"\"\"\n        for loader in self._loaders:\n            loader.reset()\n        self._cached_values = {}\n\n    def get_field_value(self, key=None, field=None, default=UNSET_ARG, **kwargs):\n        \"\"\"Get value for a configuration field.\n\n        Args:\n            key: Configuration key name\n            field: Configuration field object\n            default: Default value if not found\n            **kwargs: Additional arguments for child creation\n\n        Returns:\n            Configuration value for the specified field\n\n        Raises:\n            UndeclaredField: If field is not found and no default provided\n        \"\"\"\n\n        # Parse input\n        if field is None and key is None:\n            assert False, \"BUG here\"\n\n        if field is None:\n            assert isinstance(key, (str, int))\n\n            field = self.declared_fields.get(key, None)\n            if field is None:\n                if default is not UNSET_ARG:\n                    return default\n                raise exceptions.UndeclaredField(f\"Configuration '{key}' not found\")\n            assert key == field.key, f\"Got: {key} != {field.key}\"\n\n        if key is None:\n            key = field.key\n\n        # Check in cache\n        if self._cache and key in self._cached_values:\n            return self._cached_values[key]\n\n        conf = self.create_child(key, field, **kwargs)\n        assert isinstance(\n            conf, (type(None), bool, int, str, Sequence, Mapping, ConfigurationDict)\n        ), f\"Got: {type(conf)}\"\n\n        if self._cache:\n            self._cached_values[key] = conf\n        return conf\n\n    def get_values(self, lvl=-1, **kwargs):\n        \"Return all values of the container\"\n\n        if lvl == 0:\n            return self\n\n        out = {}\n        for key, _ in self.declared_fields.items():\n            val = self.get_field_value(key)\n            if isinstance(val, Store):\n                val = val.get_values(lvl=lvl - 1)\n\n            out[key] = val\n\n        return out\n\n    # This should be split if field has children or not ...\n    def create_child(self, key, field, value=NOT_SET, **kwargs):\n        \"\"\"\n        :param item:    Name of the setting to lookup.\n        :param default: Default value if none is provided. If left unset,\n                        loading a self that fails to provide this value\n                        will raise a UnknownConfiguration exception.\n        :param cast:    Callable to cast variable with. Defaults to type of\n                        default (if provided), identity if default is not\n                        provided or raises TypeError if provided cast is not\n                        callable.\n        :param loaders: A list of loader instances in the order they should be\n                        looked into. Defaults to `[Environment()]`\n        \"\"\"\n\n        # General lookup policy\n        #  - kwargs default override\n        #  - current object defaults\n        #      - Must be a dict, and the key must be present or NEXT\n        #  - child\n        #      - DEfault must be set\n        #  - UNSET\n\n        # DElegate logic to field methods\n        result, meta = field.resolve_value(\n            self,\n            value=value,\n        )\n\n        # TOFIX: To be migrated into FieldConf\n        default = meta.default\n        value = meta.value\n\n        # print (\"DUMP CHILD CREATE META\", self, key)\n        # pprint (meta.__dict__)\n\n        # If not container, return HERE\n        if not isinstance(field, FieldConf):\n            return result\n\n        # Default children_class\n        children_class = field.children_class\n        if children_class is NOT_SET:\n            children_class = self._children_class\n            # children_class = getattr(field, \"children_class\", NOT_SET)\n\n        assert (\n            children_class\n        ), f\"Got: {type(children_class)}: {children_class} for {self}:{key}\"\n\n        out = children_class(\n            key=key, value=value, default=default, parent=self, **kwargs\n        )\n\n        return out\n\n    @property\n    def declared_fields(self):\n        \"Return declared fields\"\n        out = {}\n        if self._extra_fields:\n            # Add extra fields\n            out.update(self._extra_fields)\n\n        # Always use explicit fields\n        out.update(self._declared_values)\n        return out\n\n    def set_values(self, value, lookup=False):\n        \"Set a value\"\n\n        self.set_dyn_children(value)\n\n        # Instanciate containers fields - Automatic\n        for key, field in self.declared_fields.items():\n\n            # Create child then\n            val = NOT_SET\n            if value and isinstance(value, dict):\n                try:\n                    val = value.get(key, NOT_SET)\n                except AttributeError:\n                    val = NOT_SET\n            if value and isinstance(value, list):\n                try:\n                    val = value[key]\n                except IndexError:\n                    val = NOT_SET\n\n            if field.is_container():\n                logger.debug(\n                    \"Create child container %s.%s: %s=%s\", self, key, field, val\n                )\n                # print (\"AUTOMATIC CREATE CHILD CONTAINER\", key, field, val)\n                conf = self.create_child(key, field, value=val)\n                assert isinstance(conf, (Store)), f\"Got: {type(conf)}\"\n                self._cached_values[key] = conf\n            else:\n\n                result, _ = field.resolve_value(\n                    self,\n                    value=val,\n                    lookup=lookup,\n                )\n\n                self._value = self._value or {}\n                self._value[key] = result\n                self._cached_values[key] = result\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.cast","title":"<code>cast</code>  <code>property</code>","text":"<p>Temporary property to access to self._default</p>"},{"location":"reference/configuration/#superconf.configuration.Store.declared_fields","title":"<code>declared_fields</code>  <code>property</code>","text":"<p>Return declared fields</p>"},{"location":"reference/configuration/#superconf.configuration.Store.default","title":"<code>default</code>  <code>property</code>","text":"<p>Temporary property to access to self._default</p>"},{"location":"reference/configuration/#superconf.configuration.Store.__init__","title":"<code>__init__(*, key=None, value=NOT_SET, parent=None, meta=None, **kwargs)</code>","text":"<p>Initialize a configuration container.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>Configuration key name</p> <code>None</code> <code>value</code> <p>Initial configuration value</p> <code>NOT_SET</code> <code>parent</code> <p>Parent configuration object</p> <code>None</code> <code>meta</code> <p>Optional meta configuration</p> <code>None</code> <code>**kwargs</code> <p>Additional configuration options</p> <code>{}</code> Source code in <code>superconf/configuration.py</code> <pre><code>def __init__(self, *, key=None, value=NOT_SET, parent=None, meta=None, **kwargs):\n    \"\"\"Initialize a configuration container.\n\n    Args:\n        key: Configuration key name\n        value: Initial configuration value\n        parent: Parent configuration object\n        meta: Optional meta configuration\n        **kwargs: Additional configuration options\n    \"\"\"\n\n    # super(Store, self).__init__(key=key, value=value, parent=parent)\n    super().__init__(key=key, value=value, parent=parent)\n\n    # As this can be updated during runtime ...\n    # self._declared_values = self._declared_values\n    # self._declared_values = dict()\n    self._cached_values = {}\n\n    kwargs.update(\n        dict(\n            key=key,\n            # loaders=loaders,\n            # cache=cache,\n            parent=parent,\n        )\n    )\n\n    # self._loaders = NOT_SET\n    self._loaders = self.query_inst_cfg(\"loaders\", override=kwargs)\n    # self._cache = self.query_inst_cfg(\"cache\", override=kwargs)\n    self._cache = True  # TOFIX\n\n    self._extra_fields_enabled = self.query_inst_cfg(\n        \"extra_fields\",\n        override=kwargs,\n        default=True,  # TOFIX, should be set to false by default\n    )\n    self._extra_fields = {}\n    self._children_class = self.query_inst_cfg(\n        \"children_class\", override=kwargs, default=NOT_SET\n    )\n\n    self._cast = self.query_inst_cfg(\"cast\", override=kwargs, default=None)\n    self._strict_cast = self.query_inst_cfg(\"strict_cast\", override=kwargs)\n\n    self._default = self.query_inst_cfg(\"default\", override=kwargs, default=NOT_SET)\n    if self._default is NOT_SET:\n        self._default = self.query_parent_cfg(\n            \"default\", as_subkey=True, default=NOT_SET\n        )\n\n    # print (\"\\n\\n===== CREATE NEW CONFIG\", self.key, self, value)\n    child_values = self._default if self._value is NOT_SET else self._value\n    self.set_values(child_values, lookup=True)\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.create_child","title":"<code>create_child(key, field, value=NOT_SET, **kwargs)</code>","text":"<p>:param item:    Name of the setting to lookup. :param default: Default value if none is provided. If left unset,                 loading a self that fails to provide this value                 will raise a UnknownConfiguration exception. :param cast:    Callable to cast variable with. Defaults to type of                 default (if provided), identity if default is not                 provided or raises TypeError if provided cast is not                 callable. :param loaders: A list of loader instances in the order they should be                 looked into. Defaults to <code>[Environment()]</code></p> Source code in <code>superconf/configuration.py</code> <pre><code>def create_child(self, key, field, value=NOT_SET, **kwargs):\n    \"\"\"\n    :param item:    Name of the setting to lookup.\n    :param default: Default value if none is provided. If left unset,\n                    loading a self that fails to provide this value\n                    will raise a UnknownConfiguration exception.\n    :param cast:    Callable to cast variable with. Defaults to type of\n                    default (if provided), identity if default is not\n                    provided or raises TypeError if provided cast is not\n                    callable.\n    :param loaders: A list of loader instances in the order they should be\n                    looked into. Defaults to `[Environment()]`\n    \"\"\"\n\n    # General lookup policy\n    #  - kwargs default override\n    #  - current object defaults\n    #      - Must be a dict, and the key must be present or NEXT\n    #  - child\n    #      - DEfault must be set\n    #  - UNSET\n\n    # DElegate logic to field methods\n    result, meta = field.resolve_value(\n        self,\n        value=value,\n    )\n\n    # TOFIX: To be migrated into FieldConf\n    default = meta.default\n    value = meta.value\n\n    # print (\"DUMP CHILD CREATE META\", self, key)\n    # pprint (meta.__dict__)\n\n    # If not container, return HERE\n    if not isinstance(field, FieldConf):\n        return result\n\n    # Default children_class\n    children_class = field.children_class\n    if children_class is NOT_SET:\n        children_class = self._children_class\n        # children_class = getattr(field, \"children_class\", NOT_SET)\n\n    assert (\n        children_class\n    ), f\"Got: {type(children_class)}: {children_class} for {self}:{key}\"\n\n    out = children_class(\n        key=key, value=value, default=default, parent=self, **kwargs\n    )\n\n    return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.get_field_value","title":"<code>get_field_value(key=None, field=None, default=UNSET_ARG, **kwargs)</code>","text":"<p>Get value for a configuration field.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>Configuration key name</p> <code>None</code> <code>field</code> <p>Configuration field object</p> <code>None</code> <code>default</code> <p>Default value if not found</p> <code>UNSET_ARG</code> <code>**kwargs</code> <p>Additional arguments for child creation</p> <code>{}</code> <p>Returns:</p> Type Description <p>Configuration value for the specified field</p> <p>Raises:</p> Type Description <code>UndeclaredField</code> <p>If field is not found and no default provided</p> Source code in <code>superconf/configuration.py</code> <pre><code>def get_field_value(self, key=None, field=None, default=UNSET_ARG, **kwargs):\n    \"\"\"Get value for a configuration field.\n\n    Args:\n        key: Configuration key name\n        field: Configuration field object\n        default: Default value if not found\n        **kwargs: Additional arguments for child creation\n\n    Returns:\n        Configuration value for the specified field\n\n    Raises:\n        UndeclaredField: If field is not found and no default provided\n    \"\"\"\n\n    # Parse input\n    if field is None and key is None:\n        assert False, \"BUG here\"\n\n    if field is None:\n        assert isinstance(key, (str, int))\n\n        field = self.declared_fields.get(key, None)\n        if field is None:\n            if default is not UNSET_ARG:\n                return default\n            raise exceptions.UndeclaredField(f\"Configuration '{key}' not found\")\n        assert key == field.key, f\"Got: {key} != {field.key}\"\n\n    if key is None:\n        key = field.key\n\n    # Check in cache\n    if self._cache and key in self._cached_values:\n        return self._cached_values[key]\n\n    conf = self.create_child(key, field, **kwargs)\n    assert isinstance(\n        conf, (type(None), bool, int, str, Sequence, Mapping, ConfigurationDict)\n    ), f\"Got: {type(conf)}\"\n\n    if self._cache:\n        self._cached_values[key] = conf\n    return conf\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.get_value","title":"<code>get_value(key, lvl=-1, **kwargs)</code>","text":"<p>Get configuration value for a given key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <p>Configuration key to retrieve</p> required <code>lvl</code> <p>Recursion level for nested configurations</p> <code>-1</code> <code>**kwargs</code> <p>Additional arguments passed to get_field_value</p> <code>{}</code> <p>Returns:</p> Type Description <p>Configuration value for the specified key</p> Source code in <code>superconf/configuration.py</code> <pre><code>def get_value(self, key, lvl=-1, **kwargs):\n    \"\"\"Get configuration value for a given key.\n\n    Args:\n        key: Configuration key to retrieve\n        lvl: Recursion level for nested configurations\n        **kwargs: Additional arguments passed to get_field_value\n\n    Returns:\n        Configuration value for the specified key\n    \"\"\"\n    assert isinstance(key, str)\n    return self.get_field_value(key, **kwargs)\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.get_values","title":"<code>get_values(lvl=-1, **kwargs)</code>","text":"<p>Return all values of the container</p> Source code in <code>superconf/configuration.py</code> <pre><code>def get_values(self, lvl=-1, **kwargs):\n    \"Return all values of the container\"\n\n    if lvl == 0:\n        return self\n\n    out = {}\n    for key, _ in self.declared_fields.items():\n        val = self.get_field_value(key)\n        if isinstance(val, Store):\n            val = val.get_values(lvl=lvl - 1)\n\n        out[key] = val\n\n    return out\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.reset","title":"<code>reset()</code>","text":"<p>Reset all loaders and clear cached values.</p> <p>This should be called when configuration values need to be reloaded.</p> Source code in <code>superconf/configuration.py</code> <pre><code>def reset(self):\n    \"\"\"Reset all loaders and clear cached values.\n\n    This should be called when configuration values need to be reloaded.\n    \"\"\"\n    for loader in self._loaders:\n        loader.reset()\n    self._cached_values = {}\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.set_dyn_children","title":"<code>set_dyn_children(value)</code>","text":"<p>Placeholder</p> Source code in <code>superconf/configuration.py</code> <pre><code>def set_dyn_children(self, value):\n    \"Placeholder\"\n</code></pre>"},{"location":"reference/configuration/#superconf.configuration.Store.set_values","title":"<code>set_values(value, lookup=False)</code>","text":"<p>Set a value</p> Source code in <code>superconf/configuration.py</code> <pre><code>def set_values(self, value, lookup=False):\n    \"Set a value\"\n\n    self.set_dyn_children(value)\n\n    # Instanciate containers fields - Automatic\n    for key, field in self.declared_fields.items():\n\n        # Create child then\n        val = NOT_SET\n        if value and isinstance(value, dict):\n            try:\n                val = value.get(key, NOT_SET)\n            except AttributeError:\n                val = NOT_SET\n        if value and isinstance(value, list):\n            try:\n                val = value[key]\n            except IndexError:\n                val = NOT_SET\n\n        if field.is_container():\n            logger.debug(\n                \"Create child container %s.%s: %s=%s\", self, key, field, val\n            )\n            # print (\"AUTOMATIC CREATE CHILD CONTAINER\", key, field, val)\n            conf = self.create_child(key, field, value=val)\n            assert isinstance(conf, (Store)), f\"Got: {type(conf)}\"\n            self._cached_values[key] = conf\n        else:\n\n            result, _ = field.resolve_value(\n                self,\n                value=val,\n                lookup=lookup,\n            )\n\n            self._value = self._value or {}\n            self._value[key] = result\n            self._cached_values[key] = result\n</code></pre>"},{"location":"reference/diagram/","title":"Diagrams","text":""},{"location":"reference/diagram/#package","title":"Package","text":""},{"location":"reference/diagram/#configuration","title":"Configuration","text":""},{"location":"reference/diagram/#configurations","title":"Configurations","text":""},{"location":"reference/diagram/#fields","title":"Fields","text":""},{"location":"reference/diagram/#loaders","title":"Loaders","text":""},{"location":"reference/diagram/#casts","title":"Casts","text":""},{"location":"reference/diagram/#configuration-extra","title":"Configuration Extra","text":""},{"location":"reference/diagram/#xdgconfig","title":"XDGConfig","text":""},{"location":"reference/diagram/#helpers","title":"Helpers","text":""},{"location":"reference/diagram/#anchors","title":"Anchors","text":""},{"location":"reference/extra_xdg/","title":"Module API - XDGConfig","text":""},{"location":"reference/extra_xdg/#superconf.extra.xdg","title":"<code>superconf.extra.xdg</code>","text":"<p>XDG Support</p>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.CastEnvColonValues","title":"<code>CastEnvColonValues</code>","text":"<p>               Bases: <code>AsList</code></p> <p>Cast env value as list with colon seprated values</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>class CastEnvColonValues(AsList):\n    \"Cast env value as list with colon seprated values\"\n\n    def __init__(self, **kwargs):\n\n        self.as_best = AsBest()\n        super().__init__(**kwargs)\n\n    def __call__(self, value):\n        # print (\"CALL CastEnvColonValues\", self, value )\n        # out = traceback.print_stack()\n        # print (\"EXECUTED\", out)\n\n        out = super().__call__(value)\n        ret = []\n        for x in out:\n            x = os.path.expandvars(x)\n            x = self.as_best(x)\n            ret.append(x)\n\n        return ret\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.ExtraConfig","title":"<code>ExtraConfig</code>","text":"<p>               Bases: <code>XDGConfig</code></p> <p>Extra var support</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>class ExtraConfig(XDGConfig):\n    \"Extra var support\"\n\n    GIT_AUTHOR_EMAIL = Field()\n    GIT_AUTHOR_NAME = Field()\n    GIT_COMMITTER_EMAIL = Field()\n    GIT_COMMITTER_NAME = Field()\n\n    TERM = Field()\n    SSH_AGENT_PID = Field()\n    SSH_AUTH_SOCK = Field()\n    XDG_SEAT = Field()\n    XDG_SEAT_PATH = Field()\n    XDG_SESSION_CLASS = Field()\n    XDG_SESSION_DESKTOP = Field()\n    XDG_SESSION_ID = Field()\n    XDG_SESSION_PATH = Field()\n    XDG_SESSION_TYPE = Field()\n    VIRTUAL_ENV = Field()\n    LOGNAME = Field()\n    GNUPGHOME = Field()\n    # GITEA_LOGIN = Field()\n    # GITEA_SERVER_URL = Field()\n    # GH_REPO = Field()\n    # GH_TOKEN = Field()\n    # DIRENV_DIR = Field()\n    # DIRENV_FILE = Field()\n    DESKTOP_SESSION = Field()\n    DBUS_SESSION_BUS_ADDRESS = Field()\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.UserConfig","title":"<code>UserConfig</code>","text":"<p>               Bases: <code>ConfigurationDict</code></p> <p>User var support</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>class UserConfig(ConfigurationDict):\n    \"User var support\"\n\n    meta__env_parents = False  # Not parent keys\n    meta__env_name = \"\"  # No prefix for environment vars\n\n    HOME = Field(default=\"/home/user\", cast=cast_env)\n    USER = Field(default=\"user\", cast=cast_env)\n    UID = Field(default=\"1000\", cast=cast_env)\n    LANG = Field(default=\"en_US.utf8\", cast=cast_env)\n\n    SHELL = Field(default=\"/bin/bash\", cast=cast_env)\n    SHLVL = Field(default=\"/bin/bash\", cast=cast_env)\n    PWD = Field(default=\"/\", cast=cast_env)\n    OLDPWD = Field(default=\"/\", cast=cast_env)\n    PATH = Field(default=\"/\", cast=cast_env_colon)\n    DISPLAY = Field(default=\"\", cast=cast_env)\n\n    WEIRD = Field(cast=cast_env)\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig","title":"<code>XDGConfig</code>","text":"<p>               Bases: <code>UserConfig</code></p> <p>Base class with XDG var support</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>class XDGConfig(UserConfig):\n    \"Base class with XDG var support\"\n\n    meta__xdg_file_fmt = [\n        \"yml\",\n        \"yaml\",\n        \"json\",\n        \"toml\",\n        # \"ini\",\n    ]\n\n    XDG_CONFIG_HOME = Field(default=\"$HOME/.config\", cast=cast_env)  # Like: /etc\n    XDG_DATA_HOME = Field(\n        default=\"$HOME/.local/share\", cast=cast_env\n    )  # Like: /usr/share\n    XDG_CACHE_HOME = Field(default=\"$HOME/.cache\", cast=cast_env)  # Like: /var/cache\n    XDG_STATE_HOME = Field(\n        default=\"$HOME/.local/state\", cast=cast_env\n    )  # Like: /var/lib\n\n    XDG_RUNTIME_DIR = Field(\n        default=\"/run/user/$UID\", cast=cast_env\n    )  # Like: /run/user/$UID for pam_systemd\n\n    XDG_CONFIG_DIRS = Field(default=\"/etc/xdg\", cast=cast_env_colon)\n    XDG_DATA_DIRS = Field(default=\"/usr/local/share:/usr/share\", cast=cast_env_colon)\n\n    # Legacy commands\n    def get_config_file(self, name=None):\n        \"\"\"Get config file path.\"\"\"\n        return self.get_file(\"XDG_CONFIG_HOME\", name)\n\n    def get_config_dir(self, name=None):\n        \"\"\"Get config directory path.\"\"\"\n        return self.get_dir(\"XDG_CONFIG_HOME\", name)\n\n    # Internal API\n    def _parse_path(self, values, name=None, prefix=None, extensions=None):\n        \"\"\"Parse and expand path.\"\"\"\n\n        found = False\n        extensions = extensions or []\n        ret = []\n        for path in values:\n\n            path = os.path.expandvars(path)\n            if isinstance(prefix, str):\n                path = os.path.join(path, prefix)\n            path = path.rstrip(\"/\")\n\n            if extensions:\n                # File lookup only\n\n                if name:\n\n                    # Validate name doesn't already end with any extension\n                    name, file_extension = os.path.splitext(name)\n                    if file_extension:\n                        file_extension = file_extension.lstrip(\".\")\n                        if file_extension not in extensions:\n                            name = f\"{name}.{file_extension}\"\n                        else:\n                            extensions = [file_extension]\n\n                    default_path = os.path.join(path, f\"{name}.{extensions[0]}\")\n                    found = False\n                    for ext in extensions:\n                        if found is False:\n                            fname = f\"{name}.{ext}\"\n                            fpath = os.path.join(path, fname)\n                            if os.path.isfile(fpath):\n                                path = fpath\n                                found = True\n                else:\n                    default_path = f\"{path}.{extensions[0]}\"\n                    found = False\n                    for ext in extensions:\n                        if found is False:\n                            fpath = f\"{path}.{ext}\"\n                            if os.path.isfile(fpath):\n                                path = fpath\n                                found = True\n\n                path = path if found else default_path\n            else:\n                # Only for directory lookup\n                if name:\n                    path = os.path.join(path, f\"{name}\")\n\n                else:\n                    path = f\"{path}\"\n\n            path = Path(path)\n            ret.append(path)\n\n        # print (\"MATCHED\", found, ret)\n        return ret\n\n    def read_file(self, item, name=None, missing_ok=True):\n        \"Read a file content\"\n\n        # Fetch best file\n        files = self.get_file(item, name=name)\n        if not isinstance(files, list):\n            files = [files]\n\n        # Return error if no files\n        if not files:\n            if name:\n                raise XDGException(f\"Could not find any file in {item} called {name}\")\n            raise XDGException(f\"Could not find any file in {item}\")\n\n        # Return first file\n        out = None\n        found = False\n        for file in files:\n            file = str(file)\n\n            if not os.path.isfile(file):\n                continue\n\n            found = True\n            logger.info(\"Read file %s\", file)\n\n            fcontent = read_file(file)\n            if file.endswith(\"yaml\") or file.endswith(\"yml\"):\n                out = from_yaml(fcontent)\n            elif file.endswith(\"json\"):\n                out = from_json(fcontent)\n            elif file.endswith(\"toml\"):\n                raise NotImplementedError(\"Toml support not implemented yet\")\n            elif file.endswith(\"ini\"):\n                raise NotImplementedError(\"Ini support is not implemented yet\")\n            else:\n                raise NotImplementedError(f\"Format not supported: {file}\")\n\n            break\n\n        if not found:\n            if not missing_ok:\n                raise XDGException(f\"Could not find any file in {str(files[0])}\")\n\n        return out\n\n    def write_file(self, item, data, name=None):\n        \"Write content to file\"\n\n        # Fetch best file\n        files = self.get_file(item, name=name)\n        if not isinstance(files, list):\n            files = [files]\n\n        # Return error if no files\n        if not files:\n            if name:\n                raise XDGException(f\"Could not find any file in {item} called {name}\")\n            raise XDGException(f\"Could not find any file in {item}\")\n\n        # Write only on the first file\n        files = [files[0]]\n        for file in files:\n            file = str(file)\n\n            # fcontent = read_file(file)\n            if file.endswith(\"yaml\") or file.endswith(\"yml\"):\n                out = to_yaml(data)\n            elif file.endswith(\"json\"):\n                out = to_json(data)\n            elif file.endswith(\"toml\"):\n                raise NotImplementedError(\"Toml support not implemented yet\")\n            elif file.endswith(\"ini\"):\n                raise NotImplementedError(\"Ini support is not implemented yet\")\n            else:\n                raise NotImplementedError(f\"Format not supported: {file}\")\n\n            logger.info(\"Write data in file %s\", file)\n            write_file(file, out)\n            break\n\n    def get_file(self, item, name=None):\n        \"\"\"Get file path for given XDG item.\"\"\"\n\n        # Fetch current value\n        if not hasattr(self, item.upper()):\n            choices = list(self.get_values().keys())\n            raise XDGException(f\"Unknown item: {item}, choose one of: {choices}\")\n        values = self[item]\n\n        # Convert to list\n        return_one = True\n        if isinstance(values, list):\n            return_one = False\n        else:\n            values = [values]\n        assert isinstance(values, list), f\"Got: {values}\"\n\n        # Prepare extensions\n        extensions = list(self.meta__xdg_file_fmt)\n        if extensions:  # Only append first extension if list is not empty\n            extensions.append(extensions[0])\n\n        # Parse paths\n        app_name = self.query_cfg(\"app_name\", default=None)\n        if not isinstance(app_name, str):\n            root = self.get_hierarchy()[-1]\n            app_name = root.__class__.__name__\n        assert app_name\n\n        # print (\"=== PARSE PATH\", values, name, app_name, extensions)\n        ret = self._parse_path(\n            values, name=name, prefix=app_name, extensions=extensions\n        )\n\n        if return_one is True:\n            return ret[0] if len(ret) &gt; 0 else None\n\n        return ret\n\n    def get_dir(self, item, name=None):\n        \"\"\"Get directory path for given XDG item.\"\"\"\n\n        # Fetch current value\n        if not hasattr(self, item.upper()):\n            choices = list(self.get_values().keys())\n            raise XDGException(f\"Unknown item: {item}, choose one of: {choices}\")\n        values = self[item]\n\n        # Convert to list\n        return_one = True\n        if isinstance(values, list):\n            return_one = False\n        else:\n            values = [values]\n        assert isinstance(values, list), f\"Got: {values}\"\n\n        # Prepare extensions\n        extensions = []\n\n        # Parse paths\n        app_name = self.query_cfg(\"app_name\", default=None)\n        if not app_name or not isinstance(app_name, str):\n            root = self.get_hierarchy()[-1]\n            app_name = root.__class__.__name__\n\n        ret = self._parse_path(\n            values, name=name, prefix=app_name, extensions=extensions\n        )\n\n        if return_one is True:\n            return ret[0] if len(ret) &gt; 0 else None\n\n        return ret\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig.get_config_dir","title":"<code>get_config_dir(name=None)</code>","text":"<p>Get config directory path.</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>def get_config_dir(self, name=None):\n    \"\"\"Get config directory path.\"\"\"\n    return self.get_dir(\"XDG_CONFIG_HOME\", name)\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig.get_config_file","title":"<code>get_config_file(name=None)</code>","text":"<p>Get config file path.</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>def get_config_file(self, name=None):\n    \"\"\"Get config file path.\"\"\"\n    return self.get_file(\"XDG_CONFIG_HOME\", name)\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig.get_dir","title":"<code>get_dir(item, name=None)</code>","text":"<p>Get directory path for given XDG item.</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>def get_dir(self, item, name=None):\n    \"\"\"Get directory path for given XDG item.\"\"\"\n\n    # Fetch current value\n    if not hasattr(self, item.upper()):\n        choices = list(self.get_values().keys())\n        raise XDGException(f\"Unknown item: {item}, choose one of: {choices}\")\n    values = self[item]\n\n    # Convert to list\n    return_one = True\n    if isinstance(values, list):\n        return_one = False\n    else:\n        values = [values]\n    assert isinstance(values, list), f\"Got: {values}\"\n\n    # Prepare extensions\n    extensions = []\n\n    # Parse paths\n    app_name = self.query_cfg(\"app_name\", default=None)\n    if not app_name or not isinstance(app_name, str):\n        root = self.get_hierarchy()[-1]\n        app_name = root.__class__.__name__\n\n    ret = self._parse_path(\n        values, name=name, prefix=app_name, extensions=extensions\n    )\n\n    if return_one is True:\n        return ret[0] if len(ret) &gt; 0 else None\n\n    return ret\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig.get_file","title":"<code>get_file(item, name=None)</code>","text":"<p>Get file path for given XDG item.</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>def get_file(self, item, name=None):\n    \"\"\"Get file path for given XDG item.\"\"\"\n\n    # Fetch current value\n    if not hasattr(self, item.upper()):\n        choices = list(self.get_values().keys())\n        raise XDGException(f\"Unknown item: {item}, choose one of: {choices}\")\n    values = self[item]\n\n    # Convert to list\n    return_one = True\n    if isinstance(values, list):\n        return_one = False\n    else:\n        values = [values]\n    assert isinstance(values, list), f\"Got: {values}\"\n\n    # Prepare extensions\n    extensions = list(self.meta__xdg_file_fmt)\n    if extensions:  # Only append first extension if list is not empty\n        extensions.append(extensions[0])\n\n    # Parse paths\n    app_name = self.query_cfg(\"app_name\", default=None)\n    if not isinstance(app_name, str):\n        root = self.get_hierarchy()[-1]\n        app_name = root.__class__.__name__\n    assert app_name\n\n    # print (\"=== PARSE PATH\", values, name, app_name, extensions)\n    ret = self._parse_path(\n        values, name=name, prefix=app_name, extensions=extensions\n    )\n\n    if return_one is True:\n        return ret[0] if len(ret) &gt; 0 else None\n\n    return ret\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig.read_file","title":"<code>read_file(item, name=None, missing_ok=True)</code>","text":"<p>Read a file content</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>def read_file(self, item, name=None, missing_ok=True):\n    \"Read a file content\"\n\n    # Fetch best file\n    files = self.get_file(item, name=name)\n    if not isinstance(files, list):\n        files = [files]\n\n    # Return error if no files\n    if not files:\n        if name:\n            raise XDGException(f\"Could not find any file in {item} called {name}\")\n        raise XDGException(f\"Could not find any file in {item}\")\n\n    # Return first file\n    out = None\n    found = False\n    for file in files:\n        file = str(file)\n\n        if not os.path.isfile(file):\n            continue\n\n        found = True\n        logger.info(\"Read file %s\", file)\n\n        fcontent = read_file(file)\n        if file.endswith(\"yaml\") or file.endswith(\"yml\"):\n            out = from_yaml(fcontent)\n        elif file.endswith(\"json\"):\n            out = from_json(fcontent)\n        elif file.endswith(\"toml\"):\n            raise NotImplementedError(\"Toml support not implemented yet\")\n        elif file.endswith(\"ini\"):\n            raise NotImplementedError(\"Ini support is not implemented yet\")\n        else:\n            raise NotImplementedError(f\"Format not supported: {file}\")\n\n        break\n\n    if not found:\n        if not missing_ok:\n            raise XDGException(f\"Could not find any file in {str(files[0])}\")\n\n    return out\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGConfig.write_file","title":"<code>write_file(item, data, name=None)</code>","text":"<p>Write content to file</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>def write_file(self, item, data, name=None):\n    \"Write content to file\"\n\n    # Fetch best file\n    files = self.get_file(item, name=name)\n    if not isinstance(files, list):\n        files = [files]\n\n    # Return error if no files\n    if not files:\n        if name:\n            raise XDGException(f\"Could not find any file in {item} called {name}\")\n        raise XDGException(f\"Could not find any file in {item}\")\n\n    # Write only on the first file\n    files = [files[0]]\n    for file in files:\n        file = str(file)\n\n        # fcontent = read_file(file)\n        if file.endswith(\"yaml\") or file.endswith(\"yml\"):\n            out = to_yaml(data)\n        elif file.endswith(\"json\"):\n            out = to_json(data)\n        elif file.endswith(\"toml\"):\n            raise NotImplementedError(\"Toml support not implemented yet\")\n        elif file.endswith(\"ini\"):\n            raise NotImplementedError(\"Ini support is not implemented yet\")\n        else:\n            raise NotImplementedError(f\"Format not supported: {file}\")\n\n        logger.info(\"Write data in file %s\", file)\n        write_file(file, out)\n        break\n</code></pre>"},{"location":"reference/extra_xdg/#superconf.extra.xdg.XDGException","title":"<code>XDGException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>XDG error</p> Source code in <code>superconf/extra/xdg.py</code> <pre><code>class XDGException(Exception):\n    \"XDG error\"\n</code></pre>"},{"location":"reference/fields/","title":"Module API - Fields","text":""},{"location":"reference/fields/#superconf.fields","title":"<code>superconf.fields</code>","text":"<p>Fields management</p>"},{"location":"reference/fields/#superconf.fields.Field","title":"<code>Field</code>","text":"<p>Base class for configuration fields.</p> <p>A Field represents a single configuration value with optional type casting, default values, and help text. Fields are used as descriptors in configuration classes to define the structure and behavior of configuration values.</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>The casting function to use for converting raw values. If None, will be determined based on the default value's type.</p> Source code in <code>superconf/fields.py</code> <pre><code>class Field:\n    \"\"\"Base class for configuration fields.\n\n    A Field represents a single configuration value with optional type casting,\n    default values, and help text. Fields are used as descriptors in configuration\n    classes to define the structure and behavior of configuration values.\n\n    Attributes:\n        cast: The casting function to use for converting raw values. If None,\n            will be determined based on the default value's type.\n    \"\"\"\n\n    cast = None\n\n    # pylint: disable=redefined-builtin\n    def __init__(\n        self,\n        key: str = None,\n        *,\n        help: str = \"\",\n        default=NOT_SET,\n        cast: Callable = None,\n    ):\n        \"\"\"Initialize a new Field instance.\n\n        Args:\n            key: Name of the value used in file or environment variable.\n                Set automatically by the metaclass.\n            help: Plain-text description of the value.\n            default: Default value if none is provided. If left unset,\n                loading a config that fails to provide this value\n                will raise a UnknownConfiguration exception.\n            cast: Callable to cast variable with. Defaults to type of\n                default (if provided), identity if default is not\n                provided or raises TypeError if provided cast is not\n                callable.\n        \"\"\"\n        self.key = key\n        self.help = help\n        self.default = default\n        self.cast = cast or self.cast\n\n    def __get__(self, conf_instance, owner):\n        \"\"\"Descriptor get method to retrieve the field's value.\n\n        Args:\n            conf_instance: The configuration instance this field belongs to.\n            owner: The class that owns this descriptor.\n\n        Returns:\n            The field's value if accessed through an instance,\n            or the field itself if accessed through the class.\n        \"\"\"\n        if conf_instance:\n            return conf_instance.get_field_value(key=self.key, field=self)\n        return self\n\n    def __repr__(self):\n        \"\"\"Return a string representation of the field.\n\n        Returns:\n            A string showing the field's class name, key, and help text.\n        \"\"\"\n        return f'{self.__class__.__name__}(key=\"{self.key}\", help=\"{self.help}\")'\n\n    def is_container(self):\n        \"\"\"Check if this field is a container type.\n\n        Returns:\n            bool: True if this field has a children_class attribute,\n            indicating it can contain nested configuration values.\n        \"\"\"\n        children_class = getattr(self, \"children_class\", None)\n        if children_class is not None:\n            return True\n        return False\n\n    # pylint: disable=too-many-locals, too-many-branches, too-many-arguments, too-many-statements, too-many-positional-arguments\n    def resolve_value(\n        self,\n        conf_instance,\n        value=NOT_SET,\n        default=NOT_SET,\n        cast=NOT_SET,\n        loaders=NOT_SET,\n        lookup=True,\n        **kwargs,\n    ):\n        \"\"\"Resolve the final value for this field.\n\n        This method handles the complex logic of determining the field's value by:\n        1. Checking for explicitly provided values\n        2. Looking up values through loaders\n        3. Falling back to defaults\n        4. Applying type casting\n\n        Args:\n            conf_instance: The configuration instance this field belongs to.\n            value: Explicitly provided value, takes precedence if set.\n            default: Override for the field's default value.\n            cast: Override for the field's cast function.\n            loaders: List of loader objects to use for value lookup.\n            lookup: Enable loaders, or only use _value instead.\n            **kwargs: Additional keyword arguments passed to loaders.\n\n        Returns:\n            tuple: A tuple containing:\n                - The resolved and cast value\n                - A SimpleNamespace containing metadata about the resolution process\n\n        Raises:\n            CastValueFailure: If strict casting is enabled and the value\n                cannot be cast to the desired type.\n        \"\"\"\n        key = self.key\n        assert isinstance(key, (str, int)), f\"Got: {type(key)} {key}\"\n\n        # Process defaults\n        default_from = [\"args\"]\n        if default is NOT_SET and isinstance(conf_instance._default, dict):\n            # Fetch default from container\n\n            # default2 = default\n            try:\n                default = conf_instance.query_inst_cfg(\n                    \"default\", override=kwargs, default=NOT_SET\n                )[key]\n                default_from.append(\"conf_instance_query\")\n            except KeyError:\n                pass\n\n        if default is NOT_SET:\n            # Fetch default from field\n            default = self.default\n            default_from.append(\"field_instance\")\n\n        # Process value\n        if value is NOT_SET:\n            # Fetch default from container\n            try:\n                value = conf_instance._value[key]\n            except (TypeError, KeyError):  # For dict\n                pass\n            except IndexError:  # For list\n                pass\n\n        # Process cast\n        cast_from = []\n        if cast is NOT_SET:\n            cast = self.cast\n            cast_from.append(f\"field_attr:{self}.cast\")\n        if cast is NOT_SET:\n            cast = conf_instance._cast\n            cast_from.append(f\"conf_attr:{conf_instance}._cast\")\n\n        # Process loaders\n        if not lookup:\n            loaders = [_Value({key: value})]\n        else:\n            if loaders is NOT_SET:\n                loaders = conf_instance._loaders\n            if value:\n                # pylint: disable=using-constant-test\n                if False:\n                    loaders.insert(0, _Value({key: value}))\n                else:\n                    # Remove any existing _Value\n                    loaders = [\n                        loader for loader in loaders if not isinstance(loader, _Value)\n                    ]\n                    loaders.append(_Value({key: value}))\n\n        # Determine cast method\n        if callable(cast):\n            # cast = cast\n            cast_from.append(\"cast_is_callable\")\n        elif cast is None and (default is NOT_SET or default is None):\n            cast = as_is\n            cast_from.append(\"cast_is_none_and_no_defaults\")\n        elif isinstance(default, bool):\n            cast = as_boolean\n            cast_from.append(\"cast_as_boolean\")\n        elif cast is None:\n            cast = type(default)\n            cast_from.append(\"cast_is_none\")\n        elif cast is NOT_SET:\n            if default is NOT_SET or default is None:\n                cast_from.append(\"cast_notset_type_default\")\n                cast = type(default)\n            else:\n                cast_from.append(\"cast_notset_type_as_is\")\n                cast = as_is\n        else:\n            raise TypeError(f\"Cast must be callable, got: {type(cast)}\")\n\n        # Process things\n        is_casted = False\n        result = NOT_SET\n        loader_from = []\n        results_from = []\n        # print(f\"ACTUAL LOADERS FOR {self}\", loaders)\n        logger.debug(\"Current loaders for %s: %s\", self, loaders)\n        for loader in loaders:\n            loader_from.append(str(loader))\n            try:\n                logger.debug(\"Try loader for %s.%s: %s\", self, key, loaders)\n                # print(f\"  &gt; LOADER: try search in {loader} key: {key}\")\n                # print(\"VS\", self, conf_instance)\n                result = loader.getitem(conf_instance, key, **kwargs)\n\n            except KeyError:\n                continue\n\n            if result is not NOT_SET:\n                results_from.append(f\"from_loader:{loader}\")\n                result = cast(result)\n                is_casted = True\n                break\n\n        # Nothing found in all loaders, then fallback on default\n        if result is NOT_SET:\n            result = value\n            results_from.append(\"from_value\")\n        if result is NOT_SET:\n            result = default\n            results_from.append(\"from_default\")\n\n        # Try to cast value\n        if not is_casted:\n            error = None\n            try:\n                result = cast(result)\n                results_from.append(f\"casted:{cast}\")\n            except (exceptions.InvalidCastConfiguration, ValueError, TypeError) as err:\n                error = err\n                result = NOT_SET\n                results_from.append(f\"not_castable:{cast}\")\n\n            # Check for strict_cast mode:\n            if error is not None and conf_instance._strict_cast is True:\n                msg = (\n                    f\"Got error {conf_instance}.{key} {type(error)}: {error}, \"\n                    \"set strict_cast=False to disable this error\"\n                )\n                raise exceptions.CastValueFailure(msg)\n\n        meta = SimpleNamespace(\n            cast=cast,\n            default=default,\n            loaders=loaders,\n            value=result,\n            cast_from=cast_from,\n            loader_from=loader_from,\n            results_from=results_from,\n            default_from=default_from,\n        )\n\n        return result, meta\n</code></pre>"},{"location":"reference/fields/#superconf.fields.Field.__get__","title":"<code>__get__(conf_instance, owner)</code>","text":"<p>Descriptor get method to retrieve the field's value.</p> <p>Parameters:</p> Name Type Description Default <code>conf_instance</code> <p>The configuration instance this field belongs to.</p> required <code>owner</code> <p>The class that owns this descriptor.</p> required <p>Returns:</p> Type Description <p>The field's value if accessed through an instance,</p> <p>or the field itself if accessed through the class.</p> Source code in <code>superconf/fields.py</code> <pre><code>def __get__(self, conf_instance, owner):\n    \"\"\"Descriptor get method to retrieve the field's value.\n\n    Args:\n        conf_instance: The configuration instance this field belongs to.\n        owner: The class that owns this descriptor.\n\n    Returns:\n        The field's value if accessed through an instance,\n        or the field itself if accessed through the class.\n    \"\"\"\n    if conf_instance:\n        return conf_instance.get_field_value(key=self.key, field=self)\n    return self\n</code></pre>"},{"location":"reference/fields/#superconf.fields.Field.__init__","title":"<code>__init__(key=None, *, help='', default=NOT_SET, cast=None)</code>","text":"<p>Initialize a new Field instance.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Name of the value used in file or environment variable. Set automatically by the metaclass.</p> <code>None</code> <code>help</code> <code>str</code> <p>Plain-text description of the value.</p> <code>''</code> <code>default</code> <p>Default value if none is provided. If left unset, loading a config that fails to provide this value will raise a UnknownConfiguration exception.</p> <code>NOT_SET</code> <code>cast</code> <code>Callable</code> <p>Callable to cast variable with. Defaults to type of default (if provided), identity if default is not provided or raises TypeError if provided cast is not callable.</p> <code>None</code> Source code in <code>superconf/fields.py</code> <pre><code>def __init__(\n    self,\n    key: str = None,\n    *,\n    help: str = \"\",\n    default=NOT_SET,\n    cast: Callable = None,\n):\n    \"\"\"Initialize a new Field instance.\n\n    Args:\n        key: Name of the value used in file or environment variable.\n            Set automatically by the metaclass.\n        help: Plain-text description of the value.\n        default: Default value if none is provided. If left unset,\n            loading a config that fails to provide this value\n            will raise a UnknownConfiguration exception.\n        cast: Callable to cast variable with. Defaults to type of\n            default (if provided), identity if default is not\n            provided or raises TypeError if provided cast is not\n            callable.\n    \"\"\"\n    self.key = key\n    self.help = help\n    self.default = default\n    self.cast = cast or self.cast\n</code></pre>"},{"location":"reference/fields/#superconf.fields.Field.__repr__","title":"<code>__repr__()</code>","text":"<p>Return a string representation of the field.</p> <p>Returns:</p> Type Description <p>A string showing the field's class name, key, and help text.</p> Source code in <code>superconf/fields.py</code> <pre><code>def __repr__(self):\n    \"\"\"Return a string representation of the field.\n\n    Returns:\n        A string showing the field's class name, key, and help text.\n    \"\"\"\n    return f'{self.__class__.__name__}(key=\"{self.key}\", help=\"{self.help}\")'\n</code></pre>"},{"location":"reference/fields/#superconf.fields.Field.is_container","title":"<code>is_container()</code>","text":"<p>Check if this field is a container type.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if this field has a children_class attribute,</p> <p>indicating it can contain nested configuration values.</p> Source code in <code>superconf/fields.py</code> <pre><code>def is_container(self):\n    \"\"\"Check if this field is a container type.\n\n    Returns:\n        bool: True if this field has a children_class attribute,\n        indicating it can contain nested configuration values.\n    \"\"\"\n    children_class = getattr(self, \"children_class\", None)\n    if children_class is not None:\n        return True\n    return False\n</code></pre>"},{"location":"reference/fields/#superconf.fields.Field.resolve_value","title":"<code>resolve_value(conf_instance, value=NOT_SET, default=NOT_SET, cast=NOT_SET, loaders=NOT_SET, lookup=True, **kwargs)</code>","text":"<p>Resolve the final value for this field.</p> <p>This method handles the complex logic of determining the field's value by: 1. Checking for explicitly provided values 2. Looking up values through loaders 3. Falling back to defaults 4. Applying type casting</p> <p>Parameters:</p> Name Type Description Default <code>conf_instance</code> <p>The configuration instance this field belongs to.</p> required <code>value</code> <p>Explicitly provided value, takes precedence if set.</p> <code>NOT_SET</code> <code>default</code> <p>Override for the field's default value.</p> <code>NOT_SET</code> <code>cast</code> <p>Override for the field's cast function.</p> <code>NOT_SET</code> <code>loaders</code> <p>List of loader objects to use for value lookup.</p> <code>NOT_SET</code> <code>lookup</code> <p>Enable loaders, or only use _value instead.</p> <code>True</code> <code>**kwargs</code> <p>Additional keyword arguments passed to loaders.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>tuple</code> <p>A tuple containing: - The resolved and cast value - A SimpleNamespace containing metadata about the resolution process</p> <p>Raises:</p> Type Description <code>CastValueFailure</code> <p>If strict casting is enabled and the value cannot be cast to the desired type.</p> Source code in <code>superconf/fields.py</code> <pre><code>def resolve_value(\n    self,\n    conf_instance,\n    value=NOT_SET,\n    default=NOT_SET,\n    cast=NOT_SET,\n    loaders=NOT_SET,\n    lookup=True,\n    **kwargs,\n):\n    \"\"\"Resolve the final value for this field.\n\n    This method handles the complex logic of determining the field's value by:\n    1. Checking for explicitly provided values\n    2. Looking up values through loaders\n    3. Falling back to defaults\n    4. Applying type casting\n\n    Args:\n        conf_instance: The configuration instance this field belongs to.\n        value: Explicitly provided value, takes precedence if set.\n        default: Override for the field's default value.\n        cast: Override for the field's cast function.\n        loaders: List of loader objects to use for value lookup.\n        lookup: Enable loaders, or only use _value instead.\n        **kwargs: Additional keyword arguments passed to loaders.\n\n    Returns:\n        tuple: A tuple containing:\n            - The resolved and cast value\n            - A SimpleNamespace containing metadata about the resolution process\n\n    Raises:\n        CastValueFailure: If strict casting is enabled and the value\n            cannot be cast to the desired type.\n    \"\"\"\n    key = self.key\n    assert isinstance(key, (str, int)), f\"Got: {type(key)} {key}\"\n\n    # Process defaults\n    default_from = [\"args\"]\n    if default is NOT_SET and isinstance(conf_instance._default, dict):\n        # Fetch default from container\n\n        # default2 = default\n        try:\n            default = conf_instance.query_inst_cfg(\n                \"default\", override=kwargs, default=NOT_SET\n            )[key]\n            default_from.append(\"conf_instance_query\")\n        except KeyError:\n            pass\n\n    if default is NOT_SET:\n        # Fetch default from field\n        default = self.default\n        default_from.append(\"field_instance\")\n\n    # Process value\n    if value is NOT_SET:\n        # Fetch default from container\n        try:\n            value = conf_instance._value[key]\n        except (TypeError, KeyError):  # For dict\n            pass\n        except IndexError:  # For list\n            pass\n\n    # Process cast\n    cast_from = []\n    if cast is NOT_SET:\n        cast = self.cast\n        cast_from.append(f\"field_attr:{self}.cast\")\n    if cast is NOT_SET:\n        cast = conf_instance._cast\n        cast_from.append(f\"conf_attr:{conf_instance}._cast\")\n\n    # Process loaders\n    if not lookup:\n        loaders = [_Value({key: value})]\n    else:\n        if loaders is NOT_SET:\n            loaders = conf_instance._loaders\n        if value:\n            # pylint: disable=using-constant-test\n            if False:\n                loaders.insert(0, _Value({key: value}))\n            else:\n                # Remove any existing _Value\n                loaders = [\n                    loader for loader in loaders if not isinstance(loader, _Value)\n                ]\n                loaders.append(_Value({key: value}))\n\n    # Determine cast method\n    if callable(cast):\n        # cast = cast\n        cast_from.append(\"cast_is_callable\")\n    elif cast is None and (default is NOT_SET or default is None):\n        cast = as_is\n        cast_from.append(\"cast_is_none_and_no_defaults\")\n    elif isinstance(default, bool):\n        cast = as_boolean\n        cast_from.append(\"cast_as_boolean\")\n    elif cast is None:\n        cast = type(default)\n        cast_from.append(\"cast_is_none\")\n    elif cast is NOT_SET:\n        if default is NOT_SET or default is None:\n            cast_from.append(\"cast_notset_type_default\")\n            cast = type(default)\n        else:\n            cast_from.append(\"cast_notset_type_as_is\")\n            cast = as_is\n    else:\n        raise TypeError(f\"Cast must be callable, got: {type(cast)}\")\n\n    # Process things\n    is_casted = False\n    result = NOT_SET\n    loader_from = []\n    results_from = []\n    # print(f\"ACTUAL LOADERS FOR {self}\", loaders)\n    logger.debug(\"Current loaders for %s: %s\", self, loaders)\n    for loader in loaders:\n        loader_from.append(str(loader))\n        try:\n            logger.debug(\"Try loader for %s.%s: %s\", self, key, loaders)\n            # print(f\"  &gt; LOADER: try search in {loader} key: {key}\")\n            # print(\"VS\", self, conf_instance)\n            result = loader.getitem(conf_instance, key, **kwargs)\n\n        except KeyError:\n            continue\n\n        if result is not NOT_SET:\n            results_from.append(f\"from_loader:{loader}\")\n            result = cast(result)\n            is_casted = True\n            break\n\n    # Nothing found in all loaders, then fallback on default\n    if result is NOT_SET:\n        result = value\n        results_from.append(\"from_value\")\n    if result is NOT_SET:\n        result = default\n        results_from.append(\"from_default\")\n\n    # Try to cast value\n    if not is_casted:\n        error = None\n        try:\n            result = cast(result)\n            results_from.append(f\"casted:{cast}\")\n        except (exceptions.InvalidCastConfiguration, ValueError, TypeError) as err:\n            error = err\n            result = NOT_SET\n            results_from.append(f\"not_castable:{cast}\")\n\n        # Check for strict_cast mode:\n        if error is not None and conf_instance._strict_cast is True:\n            msg = (\n                f\"Got error {conf_instance}.{key} {type(error)}: {error}, \"\n                \"set strict_cast=False to disable this error\"\n            )\n            raise exceptions.CastValueFailure(msg)\n\n    meta = SimpleNamespace(\n        cast=cast,\n        default=default,\n        loaders=loaders,\n        value=result,\n        cast_from=cast_from,\n        loader_from=loader_from,\n        results_from=results_from,\n        default_from=default_from,\n    )\n\n    return result, meta\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldBool","title":"<code>FieldBool</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores and validates boolean values.</p> <p>Uses the AsBoolean cast to convert various string representations to boolean values (e.g., 'yes'/'no', 'true'/'false', '1'/'0').</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to AsBoolean() for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldBool(Field):\n    \"\"\"A field that stores and validates boolean values.\n\n    Uses the AsBoolean cast to convert various string representations\n    to boolean values (e.g., 'yes'/'no', 'true'/'false', '1'/'0').\n\n    Attributes:\n        cast: Set to AsBoolean() for automatic type conversion.\n    \"\"\"\n\n    cast = as_boolean\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldConf","title":"<code>FieldConf</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that represents a nested configuration.</p> <p>This field type allows for hierarchical configuration structures by containing another configuration class as its value.</p> <p>Attributes:</p> Name Type Description <code>children_class</code> <p>The configuration class to use for nested values.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldConf(Field):\n    \"\"\"A field that represents a nested configuration.\n\n    This field type allows for hierarchical configuration structures by containing\n    another configuration class as its value.\n\n    Attributes:\n        children_class: The configuration class to use for nested values.\n    \"\"\"\n\n    def __init__(\n        self,\n        children_class,\n        key: str = None,\n        **kwargs,\n    ):\n        \"\"\"Initialize a nested configuration field.\n\n        Args:\n            children_class: The configuration class to use for nested values.\n            key: Name of the value used in file or environment variable.\n            **kwargs: Additional arguments passed to the parent Field class.\n        \"\"\"\n        super().__init__(key, **kwargs)\n        self.children_class = children_class\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldConf.__init__","title":"<code>__init__(children_class, key=None, **kwargs)</code>","text":"<p>Initialize a nested configuration field.</p> <p>Parameters:</p> Name Type Description Default <code>children_class</code> <p>The configuration class to use for nested values.</p> required <code>key</code> <code>str</code> <p>Name of the value used in file or environment variable.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments passed to the parent Field class.</p> <code>{}</code> Source code in <code>superconf/fields.py</code> <pre><code>def __init__(\n    self,\n    children_class,\n    key: str = None,\n    **kwargs,\n):\n    \"\"\"Initialize a nested configuration field.\n\n    Args:\n        children_class: The configuration class to use for nested values.\n        key: Name of the value used in file or environment variable.\n        **kwargs: Additional arguments passed to the parent Field class.\n    \"\"\"\n    super().__init__(key, **kwargs)\n    self.children_class = children_class\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldDict","title":"<code>FieldDict</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores dictionary values.</p> <p>Uses the AsDict cast to ensure values are proper dictionaries, with support for converting mapping objects.</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to AsDict() for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldDict(Field):\n    \"\"\"A field that stores dictionary values.\n\n    Uses the AsDict cast to ensure values are proper dictionaries,\n    with support for converting mapping objects.\n\n    Attributes:\n        cast: Set to AsDict() for automatic type conversion.\n    \"\"\"\n\n    cast = as_dict\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldFloat","title":"<code>FieldFloat</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores floating-point values.</p> <p>Uses Python's built-in float() function to convert values, raising an error if the conversion fails.</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to float for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldFloat(Field):\n    \"\"\"A field that stores floating-point values.\n\n    Uses Python's built-in float() function to convert values,\n    raising an error if the conversion fails.\n\n    Attributes:\n        cast: Set to float for automatic type conversion.\n    \"\"\"\n\n    cast = float\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldInt","title":"<code>FieldInt</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores integer values.</p> <p>Uses the AsInt cast to convert string representations to integers, raising an error if the conversion fails.</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to AsInt() for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldInt(Field):\n    \"\"\"A field that stores integer values.\n\n    Uses the AsInt cast to convert string representations to integers,\n    raising an error if the conversion fails.\n\n    Attributes:\n        cast: Set to AsInt() for automatic type conversion.\n    \"\"\"\n\n    cast = as_int\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldList","title":"<code>FieldList</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores list values.</p> <p>Uses the AsList cast to convert various inputs to lists, including: - Comma-separated strings - Other sequence types - Empty values to empty lists</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to AsList() for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldList(Field):\n    \"\"\"A field that stores list values.\n\n    Uses the AsList cast to convert various inputs to lists, including:\n    - Comma-separated strings\n    - Other sequence types\n    - Empty values to empty lists\n\n    Attributes:\n        cast: Set to AsList() for automatic type conversion.\n    \"\"\"\n\n    cast = as_list\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldOption","title":"<code>FieldOption</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that validates values against a predefined set of options.</p> <p>This field ensures that values are one of a predefined set of options, optionally providing a default if an invalid option is given.</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to AsOption for option validation and conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldOption(Field):\n    \"\"\"A field that validates values against a predefined set of options.\n\n    This field ensures that values are one of a predefined set of options,\n    optionally providing a default if an invalid option is given.\n\n    Attributes:\n        cast: Set to AsOption for option validation and conversion.\n    \"\"\"\n\n    cast = as_option\n\n    def __init__(\n        self,\n        options,\n        default_option=FAIL,\n        key: str = None,\n        **kwargs,\n    ):\n        \"\"\"Initialize an option field.\n\n        Args:\n            options: Dictionary mapping valid input values to their corresponding options.\n            default_option: The option to use when an invalid value is provided.\n                If set to FAIL, raises an error for invalid values.\n            key: Name of the value used in file or environment variable.\n            **kwargs: Additional arguments passed to the parent Field class.\n\n        Raises:\n            AssertionError: If options is not a dictionary.\n        \"\"\"\n        assert isinstance(options, dict), f\"Expected a dict, got: {options}\"\n        self.cast = AsOption(options, default_option=default_option)\n        super().__init__(key, **kwargs)\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldOption.__init__","title":"<code>__init__(options, default_option=FAIL, key=None, **kwargs)</code>","text":"<p>Initialize an option field.</p> <p>Parameters:</p> Name Type Description Default <code>options</code> <p>Dictionary mapping valid input values to their corresponding options.</p> required <code>default_option</code> <p>The option to use when an invalid value is provided. If set to FAIL, raises an error for invalid values.</p> <code>FAIL</code> <code>key</code> <code>str</code> <p>Name of the value used in file or environment variable.</p> <code>None</code> <code>**kwargs</code> <p>Additional arguments passed to the parent Field class.</p> <code>{}</code> <p>Raises:</p> Type Description <code>AssertionError</code> <p>If options is not a dictionary.</p> Source code in <code>superconf/fields.py</code> <pre><code>def __init__(\n    self,\n    options,\n    default_option=FAIL,\n    key: str = None,\n    **kwargs,\n):\n    \"\"\"Initialize an option field.\n\n    Args:\n        options: Dictionary mapping valid input values to their corresponding options.\n        default_option: The option to use when an invalid value is provided.\n            If set to FAIL, raises an error for invalid values.\n        key: Name of the value used in file or environment variable.\n        **kwargs: Additional arguments passed to the parent Field class.\n\n    Raises:\n        AssertionError: If options is not a dictionary.\n    \"\"\"\n    assert isinstance(options, dict), f\"Expected a dict, got: {options}\"\n    self.cast = AsOption(options, default_option=default_option)\n    super().__init__(key, **kwargs)\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldString","title":"<code>FieldString</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores string values.</p> <p>Ensures values are stored as strings, converting other types if necessary using Python's built-in str() function.</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to str for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldString(Field):\n    \"\"\"A field that stores string values.\n\n    Ensures values are stored as strings, converting other types\n    if necessary using Python's built-in str() function.\n\n    Attributes:\n        cast: Set to str for automatic type conversion.\n    \"\"\"\n\n    cast = str\n</code></pre>"},{"location":"reference/fields/#superconf.fields.FieldTuple","title":"<code>FieldTuple</code>","text":"<p>               Bases: <code>Field</code></p> <p>A field that stores tuple values.</p> <p>Uses the AsTuple cast to convert various inputs to tuples, including: - Comma-separated strings - Other sequence types - Empty values to empty tuples</p> <p>Attributes:</p> Name Type Description <code>cast</code> <p>Set to AsTuple() for automatic type conversion.</p> Source code in <code>superconf/fields.py</code> <pre><code>class FieldTuple(Field):\n    \"\"\"A field that stores tuple values.\n\n    Uses the AsTuple cast to convert various inputs to tuples, including:\n    - Comma-separated strings\n    - Other sequence types\n    - Empty values to empty tuples\n\n    Attributes:\n        cast: Set to AsTuple() for automatic type conversion.\n    \"\"\"\n\n    cast = as_tuple\n</code></pre>"},{"location":"reference/loaders/","title":"Module API - Loaders","text":""},{"location":"reference/loaders/#superconf.loaders","title":"<code>superconf.loaders</code>","text":"<p>Loaders library</p>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader","title":"<code>AbstractConfigurationLoader</code>","text":"<p>Abstract base class for configuration loaders.</p> <p>This class defines the interface that all configuration loaders must implement. Configuration loaders are responsible for loading configuration values from different sources (files, environment, etc.).</p> Source code in <code>superconf/loaders.py</code> <pre><code>class AbstractConfigurationLoader:\n    \"\"\"\n    Abstract base class for configuration loaders.\n\n    This class defines the interface that all configuration loaders must implement.\n    Configuration loaders are responsible for loading configuration values from\n    different sources (files, environment, etc.).\n    \"\"\"\n\n    def __repr__(self):\n        raise NotImplementedError()  # pragma: no cover\n\n    def __contains__(self, item):\n        \"\"\"Check if a configuration key exists in this loader.\"\"\"\n        raise NotImplementedError()  # pragma: no cover\n\n    def __getitem__(self, item):\n        \"\"\"Retrieve a configuration value by key.\"\"\"\n        raise NotImplementedError()  # pragma: no cover\n\n    def check(self):\n        \"\"\"\n        Verify if the configuration source is valid and accessible.\n\n        Returns:\n            bool: True if the configuration source is valid, False otherwise.\n        \"\"\"\n        return True\n\n    def reset(self):\n        \"\"\"Reset the loader's internal state.\"\"\"\n\n    # pylint: disable=unused-argument\n    def contains(self, config, item):\n        \"\"\"\n        Check if a configuration key exists in this loader.\n\n        Args:\n            config: The configuration object.\n            item (str): The configuration key to check.\n\n        Returns:\n            bool: True if the key exists, False otherwise.\n        \"\"\"\n        return self.__contains__(item)\n        # raise NotImplementedError()  # pragma: no cover\n\n    def getitem(self, config, item):\n        \"\"\"\n        Retrieve a configuration value by key.\n\n        Args:\n            config: The configuration object.\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            The configuration value for the given key.\n\n        Raises:\n            KeyError: If the key doesn't exist.\n        \"\"\"\n        return self.__getitem__(item)\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if a configuration key exists in this loader.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item):\n    \"\"\"Check if a configuration key exists in this loader.\"\"\"\n    raise NotImplementedError()  # pragma: no cover\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value by key.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item):\n    \"\"\"Retrieve a configuration value by key.\"\"\"\n    raise NotImplementedError()  # pragma: no cover\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader.check","title":"<code>check()</code>","text":"<p>Verify if the configuration source is valid and accessible.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the configuration source is valid, False otherwise.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def check(self):\n    \"\"\"\n    Verify if the configuration source is valid and accessible.\n\n    Returns:\n        bool: True if the configuration source is valid, False otherwise.\n    \"\"\"\n    return True\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader.contains","title":"<code>contains(config, item)</code>","text":"<p>Check if a configuration key exists in this loader.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <p>The configuration object.</p> required <code>item</code> <code>str</code> <p>The configuration key to check.</p> required <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the key exists, False otherwise.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def contains(self, config, item):\n    \"\"\"\n    Check if a configuration key exists in this loader.\n\n    Args:\n        config: The configuration object.\n        item (str): The configuration key to check.\n\n    Returns:\n        bool: True if the key exists, False otherwise.\n    \"\"\"\n    return self.__contains__(item)\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader.getitem","title":"<code>getitem(config, item)</code>","text":"<p>Retrieve a configuration value by key.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <p>The configuration object.</p> required <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Type Description <p>The configuration value for the given key.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key doesn't exist.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def getitem(self, config, item):\n    \"\"\"\n    Retrieve a configuration value by key.\n\n    Args:\n        config: The configuration object.\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        The configuration value for the given key.\n\n    Raises:\n        KeyError: If the key doesn't exist.\n    \"\"\"\n    return self.__getitem__(item)\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.AbstractConfigurationLoader.reset","title":"<code>reset()</code>","text":"<p>Reset the loader's internal state.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the loader's internal state.\"\"\"\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.CommandLine","title":"<code>CommandLine</code>","text":"<p>               Bases: <code>AbstractConfigurationLoader</code></p> <p>Configuration loader that extracts settings from command line arguments.</p> <p>This loader uses an argparse.ArgumentParser to extract configuration values from command line arguments.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>ArgumentParser</code> <p>The parser instance to extract variables from.</p> required <code>get_args</code> <code>callable</code> <p>Optional function to extract args from the parser.                Defaults to the get_args function.</p> <code>_get_args</code> Source code in <code>superconf/loaders.py</code> <pre><code>class CommandLine(AbstractConfigurationLoader):\n    \"\"\"\n    Configuration loader that extracts settings from command line arguments.\n\n    This loader uses an argparse.ArgumentParser to extract configuration values\n    from command line arguments.\n\n    Args:\n        parser (argparse.ArgumentParser): The parser instance to extract variables from.\n        get_args (callable): Optional function to extract args from the parser.\n                           Defaults to the get_args function.\n    \"\"\"\n\n    # noinspection PyShadowingNames\n    def __init__(self, parser, get_args=_get_args):\n        \"\"\"\n        :param parser: An `argparse` parser instance to extract variables from.\n        :param function get_args: A function to extract args from the parser.\n        :type parser: argparse.ArgumentParser\n        \"\"\"\n        self.parser = parser\n        self.configs = get_args(self.parser)\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}(parser={self.parser})\"\n\n    def __contains__(self, item):\n        \"\"\"Check if a configuration key exists in the parsed arguments.\"\"\"\n        return item in self.configs\n\n    def __getitem__(self, item):\n        \"\"\"Retrieve a configuration value from the parsed arguments.\"\"\"\n        return self.configs[item]\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.CommandLine.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if a configuration key exists in the parsed arguments.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item):\n    \"\"\"Check if a configuration key exists in the parsed arguments.\"\"\"\n    return item in self.configs\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.CommandLine.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value from the parsed arguments.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item):\n    \"\"\"Retrieve a configuration value from the parsed arguments.\"\"\"\n    return self.configs[item]\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.CommandLine.__init__","title":"<code>__init__(parser, get_args=_get_args)</code>","text":"<p>:param parser: An <code>argparse</code> parser instance to extract variables from. :param function get_args: A function to extract args from the parser. :type parser: argparse.ArgumentParser</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __init__(self, parser, get_args=_get_args):\n    \"\"\"\n    :param parser: An `argparse` parser instance to extract variables from.\n    :param function get_args: A function to extract args from the parser.\n    :type parser: argparse.ArgumentParser\n    \"\"\"\n    self.parser = parser\n    self.configs = get_args(self.parser)\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Dict","title":"<code>Dict</code>","text":"<p>               Bases: <code>AbstractConfigurationLoader</code></p> <p>Configuration loader that uses a dictionary as the configuration source.</p> <p>This loader is useful for providing hardcoded default values or for testing.</p> <p>Parameters:</p> Name Type Description Default <code>values_mapping</code> <code>dict</code> <p>A dictionary of configuration key-value pairs.</p> required Example <p>config = Dict({\"debug\": \"true\", \"port\": \"8000\"}) \"debug\" in config  # True config[\"port\"]  # \"8000\"</p> Source code in <code>superconf/loaders.py</code> <pre><code>class Dict(AbstractConfigurationLoader):\n    \"\"\"\n    Configuration loader that uses a dictionary as the configuration source.\n\n    This loader is useful for providing hardcoded default values or for testing.\n\n    Args:\n        values_mapping (dict): A dictionary of configuration key-value pairs.\n\n    Example:\n        &gt;&gt;&gt; config = Dict({\"debug\": \"true\", \"port\": \"8000\"})\n        &gt;&gt;&gt; \"debug\" in config  # True\n        &gt;&gt;&gt; config[\"port\"]  # \"8000\"\n    \"\"\"\n\n    def __init__(self, values_mapping):\n        self.values_mapping = values_mapping\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}({self.values_mapping})\"\n\n    def __contains__(self, item):\n        \"\"\"Check if a configuration key exists in the dictionary.\"\"\"\n        return item in self.values_mapping\n\n    def __getitem__(self, item):\n        \"\"\"\n        Retrieve a configuration value from the dictionary.\n\n        Args:\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            The configuration value.\n\n        Raises:\n            KeyError: If the key doesn't exist in the dictionary.\n        \"\"\"\n        return self.values_mapping[item]\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Dict.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if a configuration key exists in the dictionary.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item):\n    \"\"\"Check if a configuration key exists in the dictionary.\"\"\"\n    return item in self.values_mapping\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Dict.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value from the dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Type Description <p>The configuration value.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key doesn't exist in the dictionary.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item):\n    \"\"\"\n    Retrieve a configuration value from the dictionary.\n\n    Args:\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        The configuration value.\n\n    Raises:\n        KeyError: If the key doesn't exist in the dictionary.\n    \"\"\"\n    return self.values_mapping[item]\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvFile","title":"<code>EnvFile</code>","text":"<p>               Bases: <code>AbstractConfigurationLoader</code></p> <p>Configuration loader that reads settings from a .env file.</p> <p>This loader reads configuration values from a file in environment variable format (KEY=value).</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the .env file. Defaults to \".env\".</p> <code>'.env'</code> <code>keyfmt</code> <code>callable</code> <p>Optional function to pre-format variable names.               Defaults to EnvPrefix() which converts keys to uppercase.</p> <code>EnvPrefix()</code> Example <p>env = EnvFile(\".env\", keyfmt=EnvPrefix(\"MYAPP_\"))</p> <p>With .env containing: DEBUG=true</p> <p>\"debug\" in env</p> <p>Returns <code>True</code></p> <p>env[\"debug\"]</p> <p>Return <code>\"true\"</code></p> Source code in <code>superconf/loaders.py</code> <pre><code>class EnvFile(AbstractConfigurationLoader):\n    \"\"\"\n    Configuration loader that reads settings from a .env file.\n\n    This loader reads configuration values from a file in environment variable\n    format (KEY=value).\n\n    Args:\n        filename (str): Path to the .env file. Defaults to \".env\".\n        keyfmt (callable): Optional function to pre-format variable names.\n                          Defaults to EnvPrefix() which converts keys to uppercase.\n\n    Example:\n        &gt;&gt;&gt; env = EnvFile(\".env\", keyfmt=EnvPrefix(\"MYAPP_\"))\n\n        With .env containing: DEBUG=true\n\n        &gt;&gt;&gt; \"debug\" in env\n\n        Returns `True`\n\n        &gt;&gt;&gt; env[\"debug\"]\n\n        Return `\"true\"`\n    \"\"\"\n\n    def __init__(self, filename=\".env\", keyfmt=EnvPrefix()):\n        self.filename = filename\n        self.keyfmt = keyfmt\n        self.configs = None\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(\"{self.filename}\")'\n\n    def _parse(self):\n        \"\"\"\n        Parse the .env file if not already parsed.\n\n        Raises:\n            FileNotFoundError: If the file doesn't exist or can't be read.\n        \"\"\"\n        if self.configs is not None:\n            return\n\n        self.configs = {}\n        with open(self.filename, encoding=\"utf-8\") as envfile:\n            self.configs.update(EnvFileParser(envfile).parse_config())\n\n    def check(self):\n        \"\"\"\n        Verify if the .env file exists and is valid.\n\n        Returns:\n            bool: True if the file exists and is valid, False otherwise.\n        \"\"\"\n        if not os.path.isfile(self.filename):\n            return False\n\n        try:\n            self._parse()\n        except FileNotFoundError:\n            return False\n\n        return super().check()\n\n    def __contains__(self, item):\n        \"\"\"Check if a configuration key exists in the .env file.\"\"\"\n        if not self.check():\n            return False\n\n        return self.keyfmt(item) in self.configs\n\n    def __getitem__(self, item):\n        \"\"\"\n        Retrieve a configuration value from the .env file.\n\n        Args:\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            str: The configuration value.\n\n        Raises:\n            KeyError: If the key doesn't exist in the file.\n        \"\"\"\n        if not self.check():\n            raise KeyError(f\"{item}\")\n\n        return self.configs[self.keyfmt(item)]\n\n    def reset(self):\n        \"\"\"Reset the parsed configuration cache.\"\"\"\n        self.configs = None\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvFile.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if a configuration key exists in the .env file.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item):\n    \"\"\"Check if a configuration key exists in the .env file.\"\"\"\n    if not self.check():\n        return False\n\n    return self.keyfmt(item) in self.configs\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvFile.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value from the .env file.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The configuration value.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key doesn't exist in the file.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item):\n    \"\"\"\n    Retrieve a configuration value from the .env file.\n\n    Args:\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        str: The configuration value.\n\n    Raises:\n        KeyError: If the key doesn't exist in the file.\n    \"\"\"\n    if not self.check():\n        raise KeyError(f\"{item}\")\n\n    return self.configs[self.keyfmt(item)]\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvFile.check","title":"<code>check()</code>","text":"<p>Verify if the .env file exists and is valid.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the file exists and is valid, False otherwise.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def check(self):\n    \"\"\"\n    Verify if the .env file exists and is valid.\n\n    Returns:\n        bool: True if the file exists and is valid, False otherwise.\n    \"\"\"\n    if not os.path.isfile(self.filename):\n        return False\n\n    try:\n        self._parse()\n    except FileNotFoundError:\n        return False\n\n    return super().check()\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvFile.reset","title":"<code>reset()</code>","text":"<p>Reset the parsed configuration cache.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the parsed configuration cache.\"\"\"\n    self.configs = None\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvPrefix","title":"<code>EnvPrefix</code>","text":"<p>A utility class for namespacing environment variables with a prefix.</p> <p>Since the environment is a global dictionary, it is a good practice to namespace your settings by using a unique prefix like <code>MY_APP_</code>.</p> <p>Parameters:</p> Name Type Description Default <code>prefix</code> <code>str</code> <p>The prefix to prepend to environment variable names. Defaults to \"\".</p> <code>''</code> Example <p>prefix = EnvPrefix(\"MYAPP_\") prefix(\"database_url\") 'MYAPP_DATABASE_URL'</p> Source code in <code>superconf/loaders.py</code> <pre><code>class EnvPrefix:\n    \"\"\"\n    A utility class for namespacing environment variables with a prefix.\n\n    Since the environment is a global dictionary, it is a good practice to\n    namespace your settings by using a unique prefix like ``MY_APP_``.\n\n    Args:\n        prefix (str): The prefix to prepend to environment variable names. Defaults to \"\".\n\n    Example:\n        &gt;&gt;&gt; prefix = EnvPrefix(\"MYAPP_\")\n        &gt;&gt;&gt; prefix(\"database_url\")\n        'MYAPP_DATABASE_URL'\n    \"\"\"\n\n    def __init__(self, prefix=\"\"):\n        self.prefix = prefix\n\n    def __call__(self, value):\n        \"\"\"\n        Transform a configuration key into an environment variable name.\n\n        Args:\n            value (str): The configuration key to transform.\n\n        Returns:\n            str: The environment variable name with the prefix applied and converted to uppercase.\n        \"\"\"\n        value = str(value)\n        return f\"{self.prefix}{value.upper()}\"\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(\"{self.prefix}\")'\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.EnvPrefix.__call__","title":"<code>__call__(value)</code>","text":"<p>Transform a configuration key into an environment variable name.</p> <p>Parameters:</p> Name Type Description Default <code>value</code> <code>str</code> <p>The configuration key to transform.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The environment variable name with the prefix applied and converted to uppercase.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __call__(self, value):\n    \"\"\"\n    Transform a configuration key into an environment variable name.\n\n    Args:\n        value (str): The configuration key to transform.\n\n    Returns:\n        str: The environment variable name with the prefix applied and converted to uppercase.\n    \"\"\"\n    value = str(value)\n    return f\"{self.prefix}{value.upper()}\"\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Environment","title":"<code>Environment</code>","text":"<p>               Bases: <code>AbstractConfigurationLoader</code></p> <p>Configuration loader that reads settings from environment variables.</p> <p>This loader retrieves configuration values from the system's environment variables (os.environ), optionally transforming the keys using a formatting function.</p> <p>Parameters:</p> Name Type Description Default <code>keyfmt</code> <code>callable</code> <p>Optional function to pre-format variable names.               Defaults to EnvPrefix() which converts keys to uppercase.</p> <code>EnvPrefix()</code> Example <p>env = Environment(keyfmt=EnvPrefix(\"MYAPP_\")) os.environ[\"MYAPP_DEBUG\"] = \"true\" \"debug\" in env  # True env[\"debug\"]  # \"true\"</p> Source code in <code>superconf/loaders.py</code> <pre><code>class Environment(AbstractConfigurationLoader):\n    \"\"\"\n    Configuration loader that reads settings from environment variables.\n\n    This loader retrieves configuration values from the system's environment\n    variables (os.environ), optionally transforming the keys using a formatting\n    function.\n\n    Args:\n        keyfmt (callable): Optional function to pre-format variable names.\n                          Defaults to EnvPrefix() which converts keys to uppercase.\n\n    Example:\n        &gt;&gt;&gt; env = Environment(keyfmt=EnvPrefix(\"MYAPP_\"))\n        &gt;&gt;&gt; os.environ[\"MYAPP_DEBUG\"] = \"true\"\n        &gt;&gt;&gt; \"debug\" in env  # True\n        &gt;&gt;&gt; env[\"debug\"]  # \"true\"\n    \"\"\"\n\n    def __init__(self, keyfmt=EnvPrefix(), prefix: str = None, sep: str = \"__\"):\n        \"\"\"\n        :param function keyfmt: A function to pre-format variable names.\n        \"\"\"\n        self.keyfmt = keyfmt\n        self.prefix = prefix\n        self.sep = sep\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}(keyfmt={self.keyfmt})\"\n\n    def __contains__(self, item: str) -&gt; bool:\n        \"\"\"Check if an environment variable exists for the given key.\"\"\"\n        return self.keyfmt(item) in os.environ\n\n    def __getitem__(self, item: str):\n        \"\"\"\n        Retrieve a configuration value from environment variables.\n\n        Args:\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            str: The environment variable value.\n\n        Raises:\n            KeyError: If the environment variable doesn't exist.\n        \"\"\"\n        return os.environ[self.keyfmt(item)]\n\n    def get_env_name(self, config, item: str) -&gt; str:\n        \"Return the envirnonment name for a given key in config\"\n\n        # Check if environment is enabled, and parents\n        pkey_enabled = config.query_inst_cfg(\"env_enabled\", default=True)\n        parents = []\n        if pkey_enabled:\n            parents = config.get_hierarchy()  # [:-1]\n\n        # For each parents, from bottom to top\n        parents_keys = []\n        for parent in parents:\n\n            # Fetch pkey info\n            pkey = parent.query_inst_cfg(\"env_name\", default=parent.key)\n            pkey_prefix = parent.query_inst_cfg(\"env_prefix\", default=\"\")\n            pkey_pattern = parent.query_inst_cfg(\"env_pattern\", default=\"{prefix}{key}\")\n\n            # Check if root:\n            pkey_prefix = pkey_prefix or \"\"\n            # pylint: disable=protected-access\n            if parent._parent is None and pkey is None:\n                # Is probably root, then we have to guess the name if not explicit\n                pkey = \"\"\n                if not pkey_prefix:\n                    pkey = parent.__class__.__name__\n                    pkey_prefix = \"\"\n\n            # Render format\n            pfinal = pkey_pattern.format(\n                prefix=pkey_prefix,\n                key=pkey,\n            )\n            pfinal = [str(x) for x in [pkey_prefix, pkey] if x]\n            pfinal = \"_\".join(pfinal)\n            parents_keys.append(pfinal)\n\n            # Quit if object does not want parents\n            pkey_parents = parent.query_inst_cfg(\"env_parents\", default=True)\n            if pkey_parents is False:\n                break\n\n        # Reverse key order, from top to bottom, transform to string, and then uppsercase\n        parents_keys = list(reversed(parents_keys))\n        parents_keys.append(item)\n        parents_keys = [str(x) for x in parents_keys if x]\n        # print(parents_keys)\n        fkey = self.sep.join(parents_keys).upper()\n\n        return fkey\n\n    def getitem(self, config, item: str):\n        \"\"\"\n        Retrieve a configuration value by key.\n\n        Args:\n            config: The configuration object.\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            The configuration value for the given key.\n\n        Raises:\n            KeyError: If the key doesn't exist.\n        \"\"\"\n\n        fkey = self.get_env_name(config, item)\n        # print(\"==== LOOK  ENV\", fkey)\n        ret = os.environ[fkey]\n        # print(\"==== FOUND ENV\", fkey, \"=\", ret)\n\n        ret = os.path.expandvars(ret)\n        ret = os.path.expanduser(ret)\n        return ret\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Environment.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if an environment variable exists for the given key.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item: str) -&gt; bool:\n    \"\"\"Check if an environment variable exists for the given key.\"\"\"\n    return self.keyfmt(item) in os.environ\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Environment.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value from environment variables.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The environment variable value.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the environment variable doesn't exist.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item: str):\n    \"\"\"\n    Retrieve a configuration value from environment variables.\n\n    Args:\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        str: The environment variable value.\n\n    Raises:\n        KeyError: If the environment variable doesn't exist.\n    \"\"\"\n    return os.environ[self.keyfmt(item)]\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Environment.__init__","title":"<code>__init__(keyfmt=EnvPrefix(), prefix=None, sep='__')</code>","text":"<p>:param function keyfmt: A function to pre-format variable names.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __init__(self, keyfmt=EnvPrefix(), prefix: str = None, sep: str = \"__\"):\n    \"\"\"\n    :param function keyfmt: A function to pre-format variable names.\n    \"\"\"\n    self.keyfmt = keyfmt\n    self.prefix = prefix\n    self.sep = sep\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Environment.get_env_name","title":"<code>get_env_name(config, item)</code>","text":"<p>Return the envirnonment name for a given key in config</p> Source code in <code>superconf/loaders.py</code> <pre><code>def get_env_name(self, config, item: str) -&gt; str:\n    \"Return the envirnonment name for a given key in config\"\n\n    # Check if environment is enabled, and parents\n    pkey_enabled = config.query_inst_cfg(\"env_enabled\", default=True)\n    parents = []\n    if pkey_enabled:\n        parents = config.get_hierarchy()  # [:-1]\n\n    # For each parents, from bottom to top\n    parents_keys = []\n    for parent in parents:\n\n        # Fetch pkey info\n        pkey = parent.query_inst_cfg(\"env_name\", default=parent.key)\n        pkey_prefix = parent.query_inst_cfg(\"env_prefix\", default=\"\")\n        pkey_pattern = parent.query_inst_cfg(\"env_pattern\", default=\"{prefix}{key}\")\n\n        # Check if root:\n        pkey_prefix = pkey_prefix or \"\"\n        # pylint: disable=protected-access\n        if parent._parent is None and pkey is None:\n            # Is probably root, then we have to guess the name if not explicit\n            pkey = \"\"\n            if not pkey_prefix:\n                pkey = parent.__class__.__name__\n                pkey_prefix = \"\"\n\n        # Render format\n        pfinal = pkey_pattern.format(\n            prefix=pkey_prefix,\n            key=pkey,\n        )\n        pfinal = [str(x) for x in [pkey_prefix, pkey] if x]\n        pfinal = \"_\".join(pfinal)\n        parents_keys.append(pfinal)\n\n        # Quit if object does not want parents\n        pkey_parents = parent.query_inst_cfg(\"env_parents\", default=True)\n        if pkey_parents is False:\n            break\n\n    # Reverse key order, from top to bottom, transform to string, and then uppsercase\n    parents_keys = list(reversed(parents_keys))\n    parents_keys.append(item)\n    parents_keys = [str(x) for x in parents_keys if x]\n    # print(parents_keys)\n    fkey = self.sep.join(parents_keys).upper()\n\n    return fkey\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.Environment.getitem","title":"<code>getitem(config, item)</code>","text":"<p>Retrieve a configuration value by key.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <p>The configuration object.</p> required <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Type Description <p>The configuration value for the given key.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key doesn't exist.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def getitem(self, config, item: str):\n    \"\"\"\n    Retrieve a configuration value by key.\n\n    Args:\n        config: The configuration object.\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        The configuration value for the given key.\n\n    Raises:\n        KeyError: If the key doesn't exist.\n    \"\"\"\n\n    fkey = self.get_env_name(config, item)\n    # print(\"==== LOOK  ENV\", fkey)\n    ret = os.environ[fkey]\n    # print(\"==== FOUND ENV\", fkey, \"=\", ret)\n\n    ret = os.path.expandvars(ret)\n    ret = os.path.expanduser(ret)\n    return ret\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.IniFile","title":"<code>IniFile</code>","text":"<p>               Bases: <code>AbstractConfigurationLoader</code></p> <p>Configuration loader that reads settings from an INI/CFG file.</p> <p>This loader reads configuration from a specified section in an INI-style configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>Path to the .ini/.cfg file.</p> required <code>section</code> <code>str</code> <p>Section name inside the config file. Defaults to \"settings\".</p> <code>'settings'</code> <code>keyfmt</code> <code>callable</code> <p>Optional function to pre-format variable names.</p> <code>lambda x: x</code> <p>Raises:</p> Type Description <code>InvalidConfigurationFile</code> <p>If the file is not a valid INI file.</p> <code>MissingSettingsSection</code> <p>If the specified section is not found in the file.</p> Source code in <code>superconf/loaders.py</code> <pre><code>class IniFile(AbstractConfigurationLoader):\n    \"\"\"\n    Configuration loader that reads settings from an INI/CFG file.\n\n    This loader reads configuration from a specified section in an INI-style\n    configuration file.\n\n    Args:\n        filename (str): Path to the .ini/.cfg file.\n        section (str): Section name inside the config file. Defaults to \"settings\".\n        keyfmt (callable): Optional function to pre-format variable names.\n\n    Raises:\n        InvalidConfigurationFile: If the file is not a valid INI file.\n        MissingSettingsSection: If the specified section is not found in the file.\n    \"\"\"\n\n    def __init__(self, filename, section=\"settings\", keyfmt=lambda x: x):\n        self.filename = filename\n        self.section = section\n        self.keyfmt = keyfmt\n        self.parser = ConfigParser(allow_no_value=True)\n        self._initialized = False\n\n    def __repr__(self):\n        return f'{self.__class__.__name__}(\"{self.filename}\")'\n\n    def _parse(self):\n        \"\"\"\n        Parse the INI file if not already parsed.\n\n        Raises:\n            InvalidConfigurationFile: If the file is not a valid INI file.\n            MissingSettingsSection: If the specified section is not found.\n        \"\"\"\n        if self._initialized:\n            return\n\n        with open(self.filename, encoding=\"utf-8\") as inifile:\n            try:\n                self.parser.read_file(inifile)\n            except (UnicodeDecodeError, MissingSectionHeaderError) as err:\n                raise InvalidConfigurationFile() from err\n\n        if not self.parser.has_section(self.section):\n            raise MissingSettingsSection(\n                f\"Missing [{self.section}] section in {self.filename}\"\n            )\n\n        self._initialized = True\n\n    def check(self):\n        \"\"\"\n        Verify if the INI file exists and is valid.\n\n        Returns:\n            bool: True if the file exists and is valid, False otherwise.\n        \"\"\"\n        try:\n            self._parse()\n        except (FileNotFoundError, InvalidConfigurationFile, MissingSettingsSection):\n            return False\n\n        return super().check()\n\n    def __contains__(self, item):\n        \"\"\"Check if a configuration key exists in the INI file section.\"\"\"\n        if not self.check():\n            return False\n\n        return self.parser.has_option(self.section, self.keyfmt(item))\n\n    def __getitem__(self, item):\n        \"\"\"\n        Retrieve a configuration value from the INI file section.\n\n        Args:\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            str: The configuration value.\n\n        Raises:\n            KeyError: If the key doesn't exist in the section.\n        \"\"\"\n        if not self.check():\n            raise KeyError(f\"{item}\")\n\n        try:\n            return self.parser.get(self.section, self.keyfmt(item))\n        except NoOptionError as err:\n            raise KeyError(f\"{item}\") from err\n\n    def reset(self):\n        \"\"\"Reset the parser's initialization state.\"\"\"\n        self._initialized = False\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.IniFile.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if a configuration key exists in the INI file section.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item):\n    \"\"\"Check if a configuration key exists in the INI file section.\"\"\"\n    if not self.check():\n        return False\n\n    return self.parser.has_option(self.section, self.keyfmt(item))\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.IniFile.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value from the INI file section.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The configuration value.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key doesn't exist in the section.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item):\n    \"\"\"\n    Retrieve a configuration value from the INI file section.\n\n    Args:\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        str: The configuration value.\n\n    Raises:\n        KeyError: If the key doesn't exist in the section.\n    \"\"\"\n    if not self.check():\n        raise KeyError(f\"{item}\")\n\n    try:\n        return self.parser.get(self.section, self.keyfmt(item))\n    except NoOptionError as err:\n        raise KeyError(f\"{item}\") from err\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.IniFile.check","title":"<code>check()</code>","text":"<p>Verify if the INI file exists and is valid.</p> <p>Returns:</p> Name Type Description <code>bool</code> <p>True if the file exists and is valid, False otherwise.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def check(self):\n    \"\"\"\n    Verify if the INI file exists and is valid.\n\n    Returns:\n        bool: True if the file exists and is valid, False otherwise.\n    \"\"\"\n    try:\n        self._parse()\n    except (FileNotFoundError, InvalidConfigurationFile, MissingSettingsSection):\n        return False\n\n    return super().check()\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.IniFile.reset","title":"<code>reset()</code>","text":"<p>Reset the parser's initialization state.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the parser's initialization state.\"\"\"\n    self._initialized = False\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch","title":"<code>RecursiveSearch</code>","text":"<p>               Bases: <code>AbstractConfigurationLoader</code></p> <p>Configuration loader that recursively searches for configuration files.</p> <p>This loader looks for configuration files in the current directory and all parent directories up to a specified root path. It supports multiple file types and loaders.</p> <p>Parameters:</p> Name Type Description Default <code>starting_path</code> <code>str</code> <p>The path to begin looking for configuration files.</p> <code>None</code> <code>filetypes</code> <code>tuple</code> <p>Tuple of (pattern, loader_class) pairs defining which files               to look for and how to load them. Defaults to .env, .ini, and .cfg files.</p> <code>(('.env', EnvFile), (('*.ini', '*.cfg'), IniFile))</code> <code>root_path</code> <code>str</code> <p>The path where the search will stop. Defaults to \"/\".</p> <code>'/'</code> Example <p>search = RecursiveSearch(\"/home/user/project\")</p> <p>Will look for .env, .ini, and .cfg files in: /home/user/project /home/user /home /</p> Source code in <code>superconf/loaders.py</code> <pre><code>class RecursiveSearch(AbstractConfigurationLoader):\n    \"\"\"\n    Configuration loader that recursively searches for configuration files.\n\n    This loader looks for configuration files in the current directory and all parent\n    directories up to a specified root path. It supports multiple file types and loaders.\n\n    Args:\n        starting_path (str, optional): The path to begin looking for configuration files.\n        filetypes (tuple): Tuple of (pattern, loader_class) pairs defining which files\n                          to look for and how to load them. Defaults to .env, .ini, and .cfg files.\n        root_path (str): The path where the search will stop. Defaults to \"/\".\n\n    Example:\n        &gt;&gt;&gt; search = RecursiveSearch(\"/home/user/project\")\n\n        Will look for .env, .ini, and .cfg files in:\n        /home/user/project\n        /home/user\n        /home\n        /\n    \"\"\"\n\n    def __init__(\n        self,\n        starting_path=None,\n        filetypes=((\".env\", EnvFile), ((\"*.ini\", \"*.cfg\"), IniFile)),\n        root_path=\"/\",\n    ):\n        self.root_path = os.path.realpath(root_path)\n        self._starting_path = self.root_path\n\n        if starting_path:\n            self.starting_path = starting_path\n\n        self.filetypes = filetypes\n        self._config_files = None\n\n    @property\n    def starting_path(self):\n        \"\"\"Get the current starting path for the search.\"\"\"\n        return self._starting_path\n\n    @starting_path.setter\n    def starting_path(self, path):\n        \"\"\"\n        Set the starting path for the search.\n\n        Args:\n            path (str): The new starting path.\n\n        Raises:\n            InvalidPath: If the path is invalid or outside the root path.\n        \"\"\"\n        if not path:\n            raise InvalidPath(\"Invalid starting path\")\n\n        path = os.path.realpath(os.path.abspath(path))\n        if not path.startswith(self.root_path):\n            raise InvalidPath(\"Invalid root path given\")\n        self._starting_path = path\n\n    @staticmethod\n    def get_filenames(path, patterns):\n        \"\"\"\n        Get all filenames in a directory matching the given patterns.\n\n        Args:\n            path (str): Directory to search in.\n            patterns (str or tuple): Glob pattern(s) to match against.\n\n        Returns:\n            list: List of matching filenames.\n        \"\"\"\n        filenames = []\n        if isinstance(patterns, str):\n            patterns = (patterns,)\n\n        for pattern in patterns:\n            filenames += glob(os.path.join(path, pattern))\n        return filenames\n\n    def _scan_path(self, path):\n        \"\"\"\n        Scan a directory for configuration files.\n\n        Args:\n            path (str): Directory to scan.\n\n        Returns:\n            list: List of configuration loader instances for found files.\n        \"\"\"\n        config_files = []\n\n        for patterns, Loader in self.filetypes:\n            for filename in self.get_filenames(path, patterns):\n                try:\n                    loader = Loader(filename=filename)\n                    if not loader.check():\n                        continue\n                    config_files.append(loader)\n                except InvalidConfigurationFile:\n                    continue\n\n        return config_files\n\n    def _discover(self):\n        \"\"\"Discover all configuration files in the search path hierarchy.\"\"\"\n        self._config_files = []\n\n        path = self.starting_path\n        while True:\n            if os.path.isdir(path):\n                self._config_files += self._scan_path(path)\n\n            if path == self.root_path:\n                break\n\n            path = os.path.dirname(path)\n\n    @property\n    def config_files(self):\n        \"\"\"\n        Get all discovered configuration files.\n\n        Returns:\n            list: List of configuration loader instances.\n        \"\"\"\n        if self._config_files is None:\n            self._discover()\n\n        return self._config_files\n\n    def __contains__(self, item):\n        \"\"\"Check if a configuration key exists in any of the discovered files.\"\"\"\n        for config_file in self.config_files:\n            if item in config_file:\n                return True\n        return False\n\n    def __getitem__(self, item):\n        \"\"\"\n        Retrieve a configuration value from the first file that contains it.\n\n        Args:\n            item (str): The configuration key to retrieve.\n\n        Returns:\n            str: The configuration value.\n\n        Raises:\n            KeyError: If the key doesn't exist in any configuration file.\n        \"\"\"\n        for config_file in self.config_files:\n            try:\n                return config_file[item]\n            except KeyError:\n                continue\n\n        raise KeyError(f\"{item}\")\n\n    def __repr__(self):\n        return f\"{self.__class__.__name__}(root_path={self.root_path})\"\n\n    def reset(self):\n        \"\"\"Reset the discovered configuration files cache.\"\"\"\n        self._config_files = None\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch.config_files","title":"<code>config_files</code>  <code>property</code>","text":"<p>Get all discovered configuration files.</p> <p>Returns:</p> Name Type Description <code>list</code> <p>List of configuration loader instances.</p>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch.starting_path","title":"<code>starting_path</code>  <code>property</code> <code>writable</code>","text":"<p>Get the current starting path for the search.</p>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch.__contains__","title":"<code>__contains__(item)</code>","text":"<p>Check if a configuration key exists in any of the discovered files.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __contains__(self, item):\n    \"\"\"Check if a configuration key exists in any of the discovered files.\"\"\"\n    for config_file in self.config_files:\n        if item in config_file:\n            return True\n    return False\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch.__getitem__","title":"<code>__getitem__(item)</code>","text":"<p>Retrieve a configuration value from the first file that contains it.</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>str</code> <p>The configuration key to retrieve.</p> required <p>Returns:</p> Name Type Description <code>str</code> <p>The configuration value.</p> <p>Raises:</p> Type Description <code>KeyError</code> <p>If the key doesn't exist in any configuration file.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def __getitem__(self, item):\n    \"\"\"\n    Retrieve a configuration value from the first file that contains it.\n\n    Args:\n        item (str): The configuration key to retrieve.\n\n    Returns:\n        str: The configuration value.\n\n    Raises:\n        KeyError: If the key doesn't exist in any configuration file.\n    \"\"\"\n    for config_file in self.config_files:\n        try:\n            return config_file[item]\n        except KeyError:\n            continue\n\n    raise KeyError(f\"{item}\")\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch.get_filenames","title":"<code>get_filenames(path, patterns)</code>  <code>staticmethod</code>","text":"<p>Get all filenames in a directory matching the given patterns.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>Directory to search in.</p> required <code>patterns</code> <code>str or tuple</code> <p>Glob pattern(s) to match against.</p> required <p>Returns:</p> Name Type Description <code>list</code> <p>List of matching filenames.</p> Source code in <code>superconf/loaders.py</code> <pre><code>@staticmethod\ndef get_filenames(path, patterns):\n    \"\"\"\n    Get all filenames in a directory matching the given patterns.\n\n    Args:\n        path (str): Directory to search in.\n        patterns (str or tuple): Glob pattern(s) to match against.\n\n    Returns:\n        list: List of matching filenames.\n    \"\"\"\n    filenames = []\n    if isinstance(patterns, str):\n        patterns = (patterns,)\n\n    for pattern in patterns:\n        filenames += glob(os.path.join(path, pattern))\n    return filenames\n</code></pre>"},{"location":"reference/loaders/#superconf.loaders.RecursiveSearch.reset","title":"<code>reset()</code>","text":"<p>Reset the discovered configuration files cache.</p> Source code in <code>superconf/loaders.py</code> <pre><code>def reset(self):\n    \"\"\"Reset the discovered configuration files cache.\"\"\"\n    self._config_files = None\n</code></pre>"}]}